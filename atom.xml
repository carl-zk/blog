<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一叶轻舟渡万江</title>
  <icon>https://carl-zk.github.io/blog/images/fav.png</icon>
  <subtitle>泰山不拒细壤故能成其高 江海不择细流故能就其深</subtitle>
  <link href="https://carl-zk.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://carl-zk.github.io/blog/"/>
  <updated>2024-05-19T09:56:22.478Z</updated>
  <id>https://carl-zk.github.io/blog/</id>
  
  <author>
    <name>carl-zk</name>
    <email>zxfspace@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Windows</title>
    <link href="https://carl-zk.github.io/blog/2024/05/19/windows/"/>
    <id>https://carl-zk.github.io/blog/2024/05/19/windows/</id>
    <published>2024-05-19T04:04:23.000Z</published>
    <updated>2024-05-19T09:56:22.478Z</updated>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;software&quot;&gt;&lt;a href=&quot;#software&quot; class=&quot;headerlink&quot; title=&quot;software&quot;&gt;&lt;/a&gt;software&lt;/h2&gt;&lt;h3 id=&quot;PowerToys&quot;&gt;&lt;a href=&quot;#PowerToys&quot; class=&quot;headerlink&quot; title=&quot;PowerToys&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/windows/powertoys/&quot;&gt;PowerToys&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/blog/2024/05/19/windows/powertoys.png&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;LightShot-截图工具&quot;&gt;&lt;a href=&quot;#LightShot-截图工具&quot; class=&quot;headerlink&quot; title=&quot;LightShot 截图工具&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://app.prntscr.com/en/&quot;&gt;LightShot 截图工具&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&quot;coreDNS&quot;&gt;</summary>
      
    
    
    
    <category term="系统配置" scheme="https://carl-zk.github.io/blog/categories/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring Cloud 配置加密字段</title>
    <link href="https://carl-zk.github.io/blog/2023/12/17/spring-cloud-%E9%85%8D%E7%BD%AE%E5%8A%A0%E5%AF%86%E5%AD%97%E6%AE%B5/"/>
    <id>https://carl-zk.github.io/blog/2023/12/17/spring-cloud-%E9%85%8D%E7%BD%AE%E5%8A%A0%E5%AF%86%E5%AD%97%E6%AE%B5/</id>
    <published>2023-12-17T11:47:50.000Z</published>
    <updated>2024-05-18T08:19:43.167Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;spring cloud 源码解析系列 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;/blog/repo/spring-cloud-%E9%85%8D%E7%BD%AE%E5%8A%A0%E5%AF%86%E5%AD%97%E6%AE%B5/EncryptionBootstrapConfiguration&quot;&gt;EncryptionBootstrapConfiguration&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;spring cloud rsa 加密 等效为：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span</summary>
      
    
    
    
    
    <category term="spring-cloud" scheme="https://carl-zk.github.io/blog/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 启动过程</title>
    <link href="https://carl-zk.github.io/blog/2023/12/15/spring-boot-%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/"/>
    <id>https://carl-zk.github.io/blog/2023/12/15/spring-boot-%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/</id>
    <published>2023-12-15T12:57:00.000Z</published>
    <updated>2024-05-18T08:19:43.166Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;阅读源码是最快的学习途径&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; ConfigurableApplicationContext &lt;span class=&quot;title function_&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Class&amp;lt;?&amp;gt;[] primarySources, String[] args)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Design Underground System</title>
    <link href="https://carl-zk.github.io/blog/2022/04/25/Design-Underground-System/"/>
    <id>https://carl-zk.github.io/blog/2022/04/25/Design-Underground-System/</id>
    <published>2022-04-25T13:21:57.000Z</published>
    <updated>2024-05-18T08:19:43.148Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/design-underground-system/&quot;&gt;1396. Design Underground System&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;python3 特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dict 可以用任意key：&lt;code&gt;self._stat[start_where, stationName]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;defaultdict 默认值，在非类时加 &lt;code&gt;lambda&lt;/code&gt;，在类时直接 &lt;code&gt;defaultdict(list)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    <category term="leetcode" scheme="https://carl-zk.github.io/blog/categories/leetcode/"/>
    
    
    <category term="python" scheme="https://carl-zk.github.io/blog/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Encode and Decode TinyURL</title>
    <link href="https://carl-zk.github.io/blog/2022/04/25/Encode-and-Decode-TinyURL/"/>
    <id>https://carl-zk.github.io/blog/2022/04/25/Encode-and-Decode-TinyURL/</id>
    <published>2022-04-25T12:36:39.000Z</published>
    <updated>2024-05-18T08:19:43.148Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;记录一些Python3库的用法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;alpha &amp;#x3D; string.ascii_letters + ‘0123456789’ # 静态属性&lt;/li&gt;
&lt;li&gt;random.choice() # Choose a random element from a non-empty sequence&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;长url转短url，看大佬如何思考：&lt;a href=&quot;https://leetcode.com/problems/encode-and-decode-tinyurl/discuss/100268/Two-solutions-and-thoughts&quot;&gt;StefanPochmann Two solutions and thoughts&lt;/a&gt;&lt;br&gt;若短连接用自增数字来设计会带来一些隐患：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安全，别人容易按数字遍历获取所有url&lt;/li&gt;
&lt;li&gt;对某些数字敏感的人可能不会接受&lt;/li&gt;
&lt;li&gt;同样长度的编码，纯数字的编码数量少于字母+数字组合的&lt;/li&gt;</summary>
      
    
    
    
    <category term="leetcode" scheme="https://carl-zk.github.io/blog/categories/leetcode/"/>
    
    
    <category term="python" scheme="https://carl-zk.github.io/blog/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Logger 桥接模式</title>
    <link href="https://carl-zk.github.io/blog/2022/01/09/Logger-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://carl-zk.github.io/blog/2022/01/09/Logger-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-01-09T09:35:33.000Z</published>
    <updated>2024-05-18T08:19:43.155Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;好久不写博客了，准备水一篇。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;之前写过一篇关于slf4j的文章&lt;a href=&quot;/blog/2017/03/28/log4j%E6%89%8B%E5%86%8C/&quot;&gt;Log4j2手册&lt;/a&gt;，今天就来分析一下代码。&lt;/p&gt;
&lt;p&gt;源码：&lt;a href=&quot;https://github.com/carl-zk/example-logger&quot;&gt;https://github.com/carl-zk/example-logger&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;开始实验&quot;&gt;&lt;a href=&quot;#开始实验&quot; class=&quot;headerlink&quot; title=&quot;开始实验&quot;&gt;&lt;/a&gt;开始实验&lt;/h3&gt;&lt;p&gt;首先引入 &lt;code&gt;commons-logging&lt;/code&gt;  &lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;b</summary>
      
    
    
    
    
    <category term="log4j2" scheme="https://carl-zk.github.io/blog/tags/log4j2/"/>
    
  </entry>
  
  <entry>
    <title>Binary Lifting</title>
    <link href="https://carl-zk.github.io/blog/2021/04/26/Binary-Lifting/"/>
    <id>https://carl-zk.github.io/blog/2021/04/26/Binary-Lifting/</id>
    <published>2021-04-26T12:37:02.000Z</published>
    <updated>2024-05-18T08:19:43.148Z</updated>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Kth-Ancestor-of-a-Tree-Node&quot;&gt;&lt;a href=&quot;#Kth-Ancestor-of-a-Tree-Node&quot; class=&quot;headerlink&quot; title=&quot;Kth Ancestor of a Tree Node&quot;&gt;&lt;/a&gt;Kth Ancestor of a Tree Node&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/kth-ancestor-of-a-tree-node/&quot;&gt;1483. Kth Ancestor of a Tree Node&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定一棵二叉树，给定一个 node 和 k，实现方法 &lt;code&gt;int getKthAncestor(int node, int k)&lt;/code&gt; 找到该 node 第 k 个上级节点。如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/2021/04/26/Binary-Lifting/tree.svg&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;p&gt;getKthAncestor(3, 1) &amp;#x3D; 1;&lt;br&gt;g</summary>
      
    
    
    
    <category term="数据结构" scheme="https://carl-zk.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>Patience Sorting</title>
    <link href="https://carl-zk.github.io/blog/2021/03/02/Patience-sorting/"/>
    <id>https://carl-zk.github.io/blog/2021/03/02/Patience-sorting/</id>
    <published>2021-03-02T13:46:15.000Z</published>
    <updated>2024-05-18T08:19:43.159Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;原来叫 Patience 是因为这个排序像一个扑克牌游戏，游戏名叫“Patience”，现在流行叫“Solitaire”。可以在电脑上玩玩先。&lt;br&gt;Patience sorting 最适合解决 Longest Increasing Subsequence (LIS) 问题。&lt;br&gt;例如 arr &amp;#x3D; [1,3,3,8,6,7].&lt;br&gt;&lt;img src=&quot;/blog/2021/03/02/Patience-sorting/1.svg&quot; loading=&quot;lazy&quot;&gt;&lt;br&gt;长度为4。&lt;br&gt;如何计算长度为4的 LIS 的个数呢？&lt;br&gt;&lt;img src=&quot;/blog/2021/03/02/Patience-sorting/2.svg&quot; loading=&quot;lazy&quot;&gt;&lt;br&gt;i &amp;#x3D; 0, arr[i] &amp;#x3D; 1 : len &amp;#x3D; 1, count(0) &amp;#x3D; 1. (即count(i))&lt;br&gt;i &amp;#x3D; 1, arr[i] &amp;#x3D; 3 : len &amp;#x3D; 2, count(1) &amp;#x3D; 1 (len&amp;#x3D;1</summary>
      
    
    
    
    <category term="数据结构" scheme="https://carl-zk.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>Generate Class With Freemarker</title>
    <link href="https://carl-zk.github.io/blog/2020/11/01/generate-class-with-freemaker/"/>
    <id>https://carl-zk.github.io/blog/2020/11/01/generate-class-with-freemaker/</id>
    <published>2020-11-01T09:33:42.000Z</published>
    <updated>2024-05-18T08:19:43.163Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://freemarker.apache.org/docs/ref_directive_list.html&quot;&gt;freemarker&lt;/a&gt;是一个Java template engine，可以基于模板+Data生成对应的HTML web pages, e-mails, configuration files, source code, etc.文件。&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span cla</summary>
      
    
    
    
    
    <category term="freemarker" scheme="https://carl-zk.github.io/blog/tags/freemarker/"/>
    
  </entry>
  
  <entry>
    <title>Wavelet Tree</title>
    <link href="https://carl-zk.github.io/blog/2020/09/16/Wavelet-Tree/"/>
    <id>https://carl-zk.github.io/blog/2020/09/16/Wavelet-Tree/</id>
    <published>2020-09-16T04:19:17.000Z</published>
    <updated>2024-05-18T08:19:43.162Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;最近刷题看到一个很有意思的数据结构：小波树(Wavelet Tree)。网上搜了基本都是C++实现的，我不能完全看懂，看了很多资料，大部分都不靠谱，不是图不对就是解释泛泛，最后终于找到个靠谱的论文，让我可以根据原理用Java把它实现出来，终于对它的妙处有了一点了解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;初识&quot;&gt;&lt;a href=&quot;#初识&quot; class=&quot;headerlink&quot; title=&quot;初识&quot;&gt;&lt;/a&gt;初识&lt;/h1&gt;&lt;p&gt;小波树有很多应用场景，这里就从LeetCode的一道题目说起，&lt;a href=&quot;https://leetcode.com/problems/online-majority-element-in-subarray/&quot;&gt;1157. Online Majority Element In Subarray&lt;/a&gt;，：&lt;br&gt;实现这个类 MajorityChecker 的一个方法，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MajorityChecker(int[] arr)，构造函数，传入一个int数组;&lt;/li&gt;
&lt;li&gt;int query</summary>
      
    
    
    
    <category term="数据结构" scheme="https://carl-zk.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac中处理txt中文乱码</title>
    <link href="https://carl-zk.github.io/blog/2020/08/31/Mac%E4%B8%AD%E5%A4%84%E7%90%86txt%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"/>
    <id>https://carl-zk.github.io/blog/2020/08/31/Mac%E4%B8%AD%E5%A4%84%E7%90%86txt%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</id>
    <published>2020-08-31T14:50:21.000Z</published>
    <updated>2024-05-18T08:19:43.156Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;最近下载了一本电子书，格式为TXT，打开后发现乱码，故在网上找到若干解决方法，特记于此，免于后烦。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;合并文件&quot;&gt;&lt;a href=&quot;#合并文件&quot; class=&quot;headerlink&quot; title=&quot;合并文件&quot;&gt;&lt;/a&gt;合并文件&lt;/h2&gt;&lt;p&gt;首先，每个章节为一个独立文件，文件名格式“章节编号.txt”。需要一个shell脚本整合到一个文件中&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;s</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL 8 Window Functions</title>
    <link href="https://carl-zk.github.io/blog/2020/07/15/MySQL-8-window-functions/"/>
    <id>https://carl-zk.github.io/blog/2020/07/15/MySQL-8-window-functions/</id>
    <published>2020-07-15T02:12:17.000Z</published>
    <updated>2024-05-18T08:19:43.156Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;MySQL Version: since 8.0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Window-Functions&quot;&gt;&lt;a href=&quot;#Window-Functions&quot; class=&quot;headerlink&quot; title=&quot;Window Functions&quot;&gt;&lt;/a&gt;Window Functions&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;A window function is an SQL function where the input values are taken from a “window” of one or more rows in the results set of a SELECT statement.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一个window function 是一个SQL函数，它的input是从一个“SELECT语句结果集中一行或多行的 window”中获取。与普通聚合函数的区别在于它使用关键字 &lt;code&gt;OVER&lt;/code&gt;。&lt;br&gt;window functions 不能使用&lt;c</summary>
      
    
    
    
    
    <category term="MySQL" scheme="https://carl-zk.github.io/blog/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>SkipList</title>
    <link href="https://carl-zk.github.io/blog/2020/03/05/SkipList/"/>
    <id>https://carl-zk.github.io/blog/2020/03/05/SkipList/</id>
    <published>2020-03-05T12:09:10.000Z</published>
    <updated>2024-05-18T08:19:43.161Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;This article will bring you into a fancy world of Skip Lists, come with me and enjoy your journey. &lt;/p&gt;
&lt;h2 id=&quot;Start-from-Binary-Search&quot;&gt;&lt;a href=&quot;#Start-from-Binary-Search&quot; class=&quot;headerlink&quot; title=&quot;Start from Binary Search&quot;&gt;&lt;/a&gt;Start from Binary Search&lt;/h2&gt;&lt;h3 id=&quot;1-d-array&quot;&gt;&lt;a href=&quot;#1-d-array&quot; class=&quot;headerlink&quot; title=&quot;1-d array&quot;&gt;&lt;/a&gt;1-d array&lt;/h3&gt;&lt;p&gt;Give you a sorted array a &amp;#x3D; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], query if number x exists. Which algorithm would you like to use? Binar</summary>
      
    
    
    
    <category term="数据结构" scheme="https://carl-zk.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>Gitalk 运作原理</title>
    <link href="https://carl-zk.github.io/blog/2020/03/03/gitalk-%E8%BF%90%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
    <id>https://carl-zk.github.io/blog/2020/03/03/gitalk-%E8%BF%90%E4%BD%9C%E5%8E%9F%E7%90%86/</id>
    <published>2020-03-03T05:56:21.000Z</published>
    <updated>2024-05-18T08:19:43.163Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;gitalk就是我现在用的评论工具，它基于GitHub Issue。集成倒是简单，对于git pages的博客来讲，算是很方便的评论系统了，只要有GitHub账号就可以留评论。不过使用之前还担心会对GitHub仓库带来隐患，下面是整个调查过程。&lt;br&gt;我不会介绍如何配置gitalk。我先介绍 OAuth 2 和 GitHub OAuth APPs，然后做一个demo来具体化 GitHub OAuth 认证流程，最后结合gitalk源码来看gitalk的实现。&lt;/p&gt;
&lt;h2 id=&quot;Gitalk-配置要求&quot;&gt;&lt;a href=&quot;#Gitalk-配置要求&quot; class=&quot;headerlink&quot; title=&quot;Gitalk 配置要求&quot;&gt;&lt;/a&gt;Gitalk 配置要求&lt;/h2&gt;&lt;p&gt;按照说明&lt;a href=&quot;https://github.com/gitalk/gitalk&quot;&gt;https://github.com/gitalk/gitalk&lt;/a&gt;新建一个 OAuth App，然后配置几个参数即可。&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;tabl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Segment Tree</title>
    <link href="https://carl-zk.github.io/blog/2020/02/28/Segment-Tree/"/>
    <id>https://carl-zk.github.io/blog/2020/02/28/Segment-Tree/</id>
    <published>2020-02-28T11:27:37.000Z</published>
    <updated>2024-05-18T08:19:43.160Z</updated>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Brief-Introduction&quot;&gt;&lt;a href=&quot;#Brief-Introduction&quot; class=&quot;headerlink&quot; title=&quot;Brief Introduction&quot;&gt;&lt;/a&gt;Brief Introduction&lt;/h2&gt;&lt;p&gt;线段树是一棵完全二叉树，它的每个节点代表一个区间，子节点的区间是父节点的区间的子区间。&lt;br&gt;&lt;img src=&quot;/blog/2020/02/28/Segment-Tree/st1.svg&quot; loading=&quot;lazy&quot;&gt;&lt;br&gt;如图，是一棵高度h&amp;#x3D;5的完全二叉树（即：叶节点只存在于第h和第h-1层）。每个节点保存了所涵盖的区间信息。&lt;br&gt;线段树可以用来快速查询区间信息，例如给定一个数组 arr &amp;#x3D; [10, 3, 23, 34, 2, 21, 3, 4, 9, 1]; &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;查询任意区间[L, R], 0 &amp;lt;&amp;#x3D; L &amp;lt;&amp;#x3D; R &amp;lt; arr.len 的和；&lt;/li&gt;
&lt;li&gt;修改任意一个arr[i]；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如查询[2, </summary>
      
    
    
    
    <category term="数据结构" scheme="https://carl-zk.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="python" scheme="https://carl-zk.github.io/blog/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>刷题常用数据结构在不同语言中的表示</title>
    <link href="https://carl-zk.github.io/blog/2020/01/19/%E5%88%B7%E9%A2%98%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9C%A8%E4%B8%8D%E5%90%8C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E8%A1%A8%E7%A4%BA/"/>
    <id>https://carl-zk.github.io/blog/2020/01/19/%E5%88%B7%E9%A2%98%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9C%A8%E4%B8%8D%E5%90%8C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E8%A1%A8%E7%A4%BA/</id>
    <published>2020-01-19T06:15:09.000Z</published>
    <updated>2024-05-18T08:19:43.195Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;学习一种编程语言的好方法，我个人觉得是边看官网文档，边使用。以 Python 为例，先简单浏览一下官网的入门文档，了解语言和语法特点（语法简单不、跨平台不、性能好不、编译型 or 解释型、对象回收手动 or 自动、内存管理（对象都放在哪）、哪些内置数据结构（基础类型和集合类型）、值传递 or 引用传递、深拷贝和浅拷贝、适用于）。简单学习了语法后，去 LeetCode 找俩简单题，不知道如何创建 list 或 dictionaries ，可以打开 w3c 网站。切忌想着等看完所有入门文档再 code ，读文档不必一口气看完，可以分散开；也不必先下个 IDE 和查 API 或看源码，这等你看完入门文档了再弄不迟，你要相信你始终会掌握该语言下的那个最好的 IDE 并熟练的敲快捷键跟查源码&amp;#x2F;API的。&lt;br&gt;编程语言只是实现你想法的工具，没有高低之分，使用 C 并不比使用 Java 的更高贵。你选择编程，无非是被它绚丽的外表所吸引，通过它实现你内心的想法。语言的不同只是语法糖的不同，不要沦为糖衣的工具，要记住你第一次踏进编程的时候的心情，抱着追逐梦想的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>如何写单元测试</title>
    <link href="https://carl-zk.github.io/blog/2019/06/01/%E5%A6%82%E4%BD%95%E5%86%99%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>https://carl-zk.github.io/blog/2019/06/01/%E5%A6%82%E4%BD%95%E5%86%99%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</id>
    <published>2019-06-01T03:11:45.000Z</published>
    <updated>2024-05-18T08:19:43.198Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;做有素养的工程师！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://site.mockito.org/&quot;&gt;https://site.mockito.org/&lt;/a&gt;&lt;br&gt;Mockito 是Java语言下写单元测试的工具，本篇就来讲讲它的一些概念和用法。&lt;/p&gt;
&lt;h2 id=&quot;为什么要写单元测试？&quot;&gt;&lt;a href=&quot;#为什么要写单元测试？&quot; class=&quot;headerlink&quot; title=&quot;为什么要写单元测试？&quot;&gt;&lt;/a&gt;为什么要写单元测试？&lt;/h2&gt;&lt;p&gt;作为一个工程师，写出来的项目要做到可读、可维护，这里的可读、可维护不单单指代码作者本人，更是指其他维护该项目的工程师。单元测试的好处不止为公司留下了可维护的代码，对工程师本人也是职业素养的提升。一个有良好单元测试的项目让你来接手，对你来说也是一件相对容易的事情。如果让你回忆一个很久之前开发的功能，你最好的方式是查看单元测试。&lt;br&gt;单元测试还可以迫使开发人员编写单一指责的方法、可读性高的代码。&lt;/p&gt;
&lt;h2 id=&quot;什么是单元测试？&quot;&gt;&lt;a href=&quot;#什么是单元</summary>
      
    
    
    
    
    <category term="unit test" scheme="https://carl-zk.github.io/blog/tags/unit-test/"/>
    
    <category term="mockito" scheme="https://carl-zk.github.io/blog/tags/mockito/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins CI/CD</title>
    <link href="https://carl-zk.github.io/blog/2019/05/02/Jenkins-CI-CD/"/>
    <id>https://carl-zk.github.io/blog/2019/05/02/Jenkins-CI-CD/</id>
    <published>2019-05-02T04:52:07.000Z</published>
    <updated>2024-05-18T08:19:43.151Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;很好奇 Jenkins 是怎么做灰度发布的，我不懂。&lt;br&gt;我根据对 Pipeline 的理解，然后尝试将一个 Spring Boot Web 项目编译，打包，生成镜像和部署。整个下来才发现原来我一直以为自己理解什么是滚动发布，但是实际上我不懂如何用 Jenkins 做到。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Pipeline&quot;&gt;&lt;a href=&quot;#Pipeline&quot; class=&quot;headerlink&quot; title=&quot;Pipeline&quot;&gt;&lt;/a&gt;Pipeline&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://jenkins.io/doc/book/pipeline/&quot;&gt;https://jenkins.io/doc/book/pipeline/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pipeline 是一条流水线，涵盖了整个项目从编译、打包到测试、部署中间所有的步骤。一般在Jenkinsfile文件中定义整个 pipeline。&lt;/p&gt;
&lt;p&gt;先理解 Pipeline的几个概念。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Node&lt;br&gt;Jenkins service</summary>
      
    
    
    
    
    <category term="jenkins" scheme="https://carl-zk.github.io/blog/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins Starter</title>
    <link href="https://carl-zk.github.io/blog/2019/04/21/Jenkins-Starter/"/>
    <id>https://carl-zk.github.io/blog/2019/04/21/Jenkins-Starter/</id>
    <published>2019-04-20T20:58:32.000Z</published>
    <updated>2024-05-18T08:19:43.151Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;周末有时间搞一搞Jenkins，也算是充实一下。当业务开发久了，好多工具只知道用，不知怎么搭建，有点惭愧。&lt;br&gt;Jenkins官网的文档倒是挺全的，还有中文版本，只不过我天生带debug buff，什么东西刚上手总是能遇到别人遇不到的各种问题，:)。并且官网的文档不会随着版本去更新，第一次接触还是会有一些问题，所以记录下来方便自己也方便他人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;使用Maven构建Java应用程序&quot;&gt;&lt;a href=&quot;#使用Maven构建Java应用程序&quot; class=&quot;headerlink&quot; title=&quot;使用Maven构建Java应用程序&quot;&gt;&lt;/a&gt;使用Maven构建Java应用程序&lt;/h1&gt;&lt;p&gt;参考[使用Maven构建Java应用程序](&lt;a href=&quot;https://jenkins.io/zh/doc/tutorials/&quot;&gt;https://jenkins.io/zh/doc/tutorials/&lt;/a&gt;&lt;br&gt;build-a-java-app-with-maven&amp;#x2F;)&lt;/p&gt;
&lt;h2 id=&quot;Je</summary>
      
    
    
    
    
    <category term="jenkins" scheme="https://carl-zk.github.io/blog/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>杂识</title>
    <link href="https://carl-zk.github.io/blog/2019/04/04/%E6%9D%82%E8%AF%86/"/>
    <id>https://carl-zk.github.io/blog/2019/04/04/%E6%9D%82%E8%AF%86/</id>
    <published>2019-04-04T11:51:52.000Z</published>
    <updated>2024-05-18T08:19:43.202Z</updated>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;windows-kill-pid-on-port&quot;&gt;&lt;a href=&quot;#windows-kill-pid-on-port&quot; class=&quot;headerlink&quot; title=&quot;windows kill pid on port&quot;&gt;&lt;/a&gt;windows kill pid on port&lt;/h2&gt;&lt;p&gt;&lt;code&gt;netstat -ano | findstr :8080&lt;/code&gt;&lt;br&gt;&lt;code&gt;taskkill /PID pid /F&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;find-then-rename-file&quot;&gt;&lt;a href=&quot;#find-then-rename-file&quot; class=&quot;headerlink&quot; title=&quot;find then rename file&quot;&gt;&lt;/a&gt;find then rename file&lt;/h2&gt;&lt;p&gt;&lt;code&gt;find . -name &amp;quot;*.txt&amp;quot; -exec  sh -c &amp;#39;x=&amp;#123;&amp;#125;; mv &amp;quot;$x&amp;quot; $(echo $x | sed &amp;#39;s/&#92;</summary>
      
    
    
    
    <category term="系统配置" scheme="https://carl-zk.github.io/blog/categories/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>Understanding-Oauth2</title>
    <link href="https://carl-zk.github.io/blog/2019/03/18/understanding-oauth2/"/>
    <id>https://carl-zk.github.io/blog/2019/03/18/understanding-oauth2/</id>
    <published>2019-03-18T12:53:12.000Z</published>
    <updated>2024-05-18T08:19:43.168Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;头一次尝试翻译一篇文章，不准确处请指正，谢谢！&lt;br&gt;&lt;a href=&quot;https://github.com/carl-zk/JavaJava/tree/master/oauth2&quot;&gt;https://github.com/carl-zk/JavaJava/tree/master/oauth2&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Source: &lt;a href=&quot;http://www.bubblecode.net/en/2016/01/22/understanding-oauth2/&quot;&gt;http://www.bubblecode.net/en/2016/01/22/understanding-oauth2/&lt;/a&gt;&lt;br&gt;如果OAuth2对你来说仍是一个模糊的概念或者你只想验证一下自己理解的是否准确，那么这篇文章就是为你准备的。&lt;/p&gt;
&lt;h2 id=&quot;什么是-OAuth2&quot;&gt;&lt;a href=&quot;#什么是-OAuth2&quot; class=&quot;headerlink&quot; title=&quot;什么是 OAuth2?&quot;&gt;&lt;/a&gt;什么是 OAuth2?&lt;/h2&gt;&lt;p&gt;</summary>
      
    
    
    
    
    <category term="oauth2" scheme="https://carl-zk.github.io/blog/tags/oauth2/"/>
    
  </entry>
  
  <entry>
    <title>Java Html Template Tool</title>
    <link href="https://carl-zk.github.io/blog/2019/02/19/java-html-template-tool/"/>
    <id>https://carl-zk.github.io/blog/2019/02/19/java-html-template-tool/</id>
    <published>2019-02-18T16:12:35.000Z</published>
    <updated>2024-05-18T08:19:43.164Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;一个好用的处理 html template 的工具：&lt;br&gt;&lt;a href=&quot;https://freemarker.apache.org/docs/pgui_quickstart_all.html&quot;&gt;freemarker&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;hello.ftlh&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="java" scheme="https://carl-zk.github.io/blog/categories/java/"/>
    
    
    <category term="freemarker" scheme="https://carl-zk.github.io/blog/tags/freemarker/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Security</title>
    <link href="https://carl-zk.github.io/blog/2019/02/18/spring-security/"/>
    <id>https://carl-zk.github.io/blog/2019/02/18/spring-security/</id>
    <published>2019-02-18T12:15:22.000Z</published>
    <updated>2024-05-18T08:19:43.167Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;好久不更新blog了，慵懒了！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为了搞清楚 Spring Security 是如何工作了，特地翻了下源代码，查了许多文档，因为我比较在意细节，例如从何时起SS做认证(Authentication)，从何时做授权(Authorization)，如何定制SS。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Spring-Security-Filters&quot;&gt;&lt;a href=&quot;#Spring-Security-Filters&quot; class=&quot;headerlink&quot; title=&quot;Spring Security Filters&quot;&gt;&lt;/a&gt;Spring Security Filters&lt;/h3&gt;&lt;p&gt;Spring Security 框架主要利用 Filter 来实现对 HTTP 请求的认证和授权，掌握了 Filter 就弄明白了SS。&lt;/p&gt;
&lt;p&gt;Spring Security 的所有 Filter 都放在 FilterChainProxy 的 &lt;code&gt;List&amp;lt;SecurityFilterChain&amp;gt;&lt;/code&gt; 中，Spr</summary>
      
    
    
    
    
    <category term="spring" scheme="https://carl-zk.github.io/blog/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>问题总结</title>
    <link href="https://carl-zk.github.io/blog/2018/11/16/%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>https://carl-zk.github.io/blog/2018/11/16/%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</id>
    <published>2018-11-16T06:12:09.000Z</published>
    <updated>2024-05-18T08:19:43.211Z</updated>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;生成-ES256-秘钥对&quot;&gt;&lt;a href=&quot;#生成-ES256-秘钥对&quot; class=&quot;headerlink&quot; title=&quot;生成 ES256 秘钥对&quot;&gt;&lt;/a&gt;生成 ES256 秘钥对&lt;/h2&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;openssl ecparam -genkey -name prime256v1 -noout -out ec_private.pem&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;openssl ec -&lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; ec_private.pem -pubout -out ec_public.pem&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tabl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Elasticsearch</title>
    <link href="https://carl-zk.github.io/blog/2018/10/10/elasticsearch/"/>
    <id>https://carl-zk.github.io/blog/2018/10/10/elasticsearch/</id>
    <published>2018-10-10T01:34:33.000Z</published>
    <updated>2024-05-18T08:19:43.163Z</updated>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;install-es-and-plugins&quot;&gt;&lt;a href=&quot;#install-es-and-plugins&quot; class=&quot;headerlink&quot; title=&quot;install es and plugins&quot;&gt;&lt;/a&gt;install es and plugins&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.elastic.co/downloads&quot;&gt;elasticsearch-6.4.1 download&lt;/a&gt;&lt;br&gt;plugin:&lt;br&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/plugins/6.0/analysis-smartcn.html&quot;&gt;analysis-smartcn&lt;/a&gt; (eg: .&amp;#x2F;bin&amp;#x2F;elasticsearch-plugin install analysis-smartcn)&lt;br&gt;&lt;a href=&quot;https://github.com/medcl/elasticsearch-analysis-ik&quot;&gt;ik&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;the</summary>
      
    
    
    
    
    <category term="elasticsearch" scheme="https://carl-zk.github.io/blog/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 存储过程分页</title>
    <link href="https://carl-zk.github.io/blog/2018/09/23/MySQL-%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%88%86%E9%A1%B5/"/>
    <id>https://carl-zk.github.io/blog/2018/09/23/MySQL-%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%88%86%E9%A1%B5/</id>
    <published>2018-09-23T09:19:40.000Z</published>
    <updated>2024-05-18T08:19:43.157Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.w3resource.com/mysql/mysql-procedure.php&quot;&gt;https://www.w3resource.com/mysql/mysql-procedure.php&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_substr&quot;&gt;https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_substr&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MySQL version: 5.7.9&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    
    <category term="MySQL" scheme="https://carl-zk.github.io/blog/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Mysql 中文乱码</title>
    <link href="https://carl-zk.github.io/blog/2018/09/14/mysql-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"/>
    <id>https://carl-zk.github.io/blog/2018/09/14/mysql-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</id>
    <published>2018-09-14T07:42:50.000Z</published>
    <updated>2024-05-18T08:19:43.166Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/blueheart20/article/details/52385142&quot;&gt;https://blog.csdn.net/blueheart20/article/details/52385142&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;show&lt;/span&gt; variables &lt;span class=&quot;keyword&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;char%&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/</summary>
      
    
    
    
    
    <category term="MySQL" scheme="https://carl-zk.github.io/blog/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>restTemplate未设超时导致线程池枯竭</title>
    <link href="https://carl-zk.github.io/blog/2018/08/21/restTemplate%E6%9C%AA%E8%AE%BE%E8%B6%85%E6%97%B6%E5%AF%BC%E8%87%B4%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%9E%AF%E7%AB%AD/"/>
    <id>https://carl-zk.github.io/blog/2018/08/21/restTemplate%E6%9C%AA%E8%AE%BE%E8%B6%85%E6%97%B6%E5%AF%BC%E8%87%B4%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%9E%AF%E7%AB%AD/</id>
    <published>2018-08-21T08:05:55.000Z</published>
    <updated>2024-05-18T08:19:43.166Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.baeldung.com/rest-template&quot;&gt;https://www.baeldung.com/rest-template&lt;/a&gt;&lt;br&gt;出去玩了3天服务器没出事，回来第一天就出事了，而且还很奇怪。&lt;br&gt;关键是报的这个错误明显是数据库连接池问题，看了下数据库是好的，又重启了数据库和应用服务器，这个错误居然在重启后又出现了。&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Docker Note</title>
    <link href="https://carl-zk.github.io/blog/2018/08/11/docker-note/"/>
    <id>https://carl-zk.github.io/blog/2018/08/11/docker-note/</id>
    <published>2018-08-11T15:30:54.000Z</published>
    <updated>2024-05-18T08:19:43.163Z</updated>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;docker-container-networking&quot;&gt;&lt;a href=&quot;#docker-container-networking&quot; class=&quot;headerlink&quot; title=&quot;docker container networking&quot;&gt;&lt;/a&gt;docker container networking&lt;/h2&gt;&lt;h3 id=&quot;Closed-containers&quot;&gt;&lt;a href=&quot;#Closed-containers&quot; class=&quot;headerlink&quot; title=&quot;Closed containers&quot;&gt;&lt;/a&gt;Closed containers&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker run --net none&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/ta</summary>
      
    
    
    
    
    <category term="docker" scheme="https://carl-zk.github.io/blog/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker Practice</title>
    <link href="https://carl-zk.github.io/blog/2018/08/05/docker-practice/"/>
    <id>https://carl-zk.github.io/blog/2018/08/05/docker-practice/</id>
    <published>2018-08-05T05:23:07.000Z</published>
    <updated>2024-05-18T08:19:43.163Z</updated>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;run-mysql-with-docker&quot;&gt;&lt;a href=&quot;#run-mysql-with-docker&quot; class=&quot;headerlink&quot; title=&quot;run mysql with docker&quot;&gt;&lt;/a&gt;run mysql with docker&lt;/h2&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker run -d --name mysql_server &#92;&lt;/span&gt;&lt;br&gt;&lt;span cla</summary>
      
    
    
    
    
    <category term="docker" scheme="https://carl-zk.github.io/blog/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>BeanUtils的性能问题</title>
    <link href="https://carl-zk.github.io/blog/2018/05/26/BeanUtils%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98/"/>
    <id>https://carl-zk.github.io/blog/2018/05/26/BeanUtils%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98/</id>
    <published>2018-05-26T07:57:21.000Z</published>
    <updated>2024-05-18T08:19:43.147Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;2019.8.10&lt;br&gt;BeanUtils替代工具：&lt;a href=&quot;https://github.com/mapstruct/mapstruct&quot;&gt;mapstruct&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;由于Joe指出因测试不充分，无法验证BeanUtil是否存在性能问题，故这篇文章可以仅供参考，不作为定论！欢迎更多朋友给出指导，谢谢！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Web项目后台输出一般需要把model转换成vo输出，但是有时候为了取巧不写model转vo的方法，直接利用spring的BeanUtils拷贝字段，那么这么做对性能影响大吗？&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;</summary>
      
    
    
    
    <category term="java" scheme="https://carl-zk.github.io/blog/categories/java/"/>
    
    
    <category term="reflect" scheme="https://carl-zk.github.io/blog/tags/reflect/"/>
    
  </entry>
  
  <entry>
    <title>AOP无法增强问题解剖</title>
    <link href="https://carl-zk.github.io/blog/2018/05/15/AOP%E6%97%A0%E6%B3%95%E5%A2%9E%E5%BC%BA%E9%97%AE%E9%A2%98%E8%A7%A3%E5%89%96/"/>
    <id>https://carl-zk.github.io/blog/2018/05/15/AOP%E6%97%A0%E6%B3%95%E5%A2%9E%E5%BC%BA%E9%97%AE%E9%A2%98%E8%A7%A3%E5%89%96/</id>
    <published>2018-05-15T01:36:44.000Z</published>
    <updated>2024-05-18T08:19:43.147Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;摘录自：《精通Spring 4.x 企业应用开发实战》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于Spring使用CGLib增强，所以无法对private、static、final的方法进行增强，此外还有一种特别容易忽视的情况，即funA，funB都被增强，但在funA中调用funB时funB其实并未被增强。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span cl</summary>
      
    
    
    
    
    <category term="spring" scheme="https://carl-zk.github.io/blog/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Java动态代理</title>
    <link href="https://carl-zk.github.io/blog/2018/05/12/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <id>https://carl-zk.github.io/blog/2018/05/12/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</id>
    <published>2018-05-12T00:46:13.000Z</published>
    <updated>2024-05-18T08:19:43.151Z</updated>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JDK原生动态代理&quot;&gt;&lt;a href=&quot;#JDK原生动态代理&quot; class=&quot;headerlink&quot; title=&quot;JDK原生动态代理&quot;&gt;&lt;/a&gt;JDK原生动态代理&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/xiaoluo501395377/p/3383130.html&quot;&gt;http://www.cnblogs.com/xiaoluo501395377/p/3383130.html&lt;/a&gt;&lt;br&gt;面向接口编程就一定要先定义接口再定义实现类吗？一个项目中有大量的 dao&amp;#x2F;imp、service&amp;#x2F;imp 包，看上去很‘规范’（理由是大家都这么写）。其实这样写是有历史包袱的，AOP特性的实现依赖于动态代理机制，而最早的框架中只能对接口进行动态代理，这样就导致每次都是先写接口，然后让框架去代理这个接口的实现类，返回对象是接口。而现在框架有能力直接代理对象无须接口，那我们的dao、service接口还有保留的意义吗？&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class</summary>
      
    
    
    
    <category term="java" scheme="https://carl-zk.github.io/blog/categories/java/"/>
    
    
    <category term="spring" scheme="https://carl-zk.github.io/blog/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>位运算检查加减乘除溢出</title>
    <link href="https://carl-zk.github.io/blog/2018/05/09/%E4%BD%8D%E8%BF%90%E7%AE%97%E9%98%B2%E8%B6%8A%E7%95%8C/"/>
    <id>https://carl-zk.github.io/blog/2018/05/09/%E4%BD%8D%E8%BF%90%E7%AE%97%E9%98%B2%E8%B6%8A%E7%95%8C/</id>
    <published>2018-05-09T01:23:47.000Z</published>
    <updated>2024-05-18T08:19:43.194Z</updated>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;位运算&quot;&gt;&lt;a href=&quot;#位运算&quot; class=&quot;headerlink&quot; title=&quot;位运算&quot;&gt;&lt;/a&gt;位运算&lt;/h1&gt;&lt;h2 id=&quot;amp&quot;&gt;&lt;a href=&quot;#amp&quot; class=&quot;headerlink&quot; title=&quot;&amp;amp;&quot;&gt;&lt;/a&gt;&amp;amp;&lt;/h2&gt;&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;|&quot;&gt;&lt;/a&gt;|&lt;/h2&gt;&lt;h2 id=&quot;-1&quot;&gt;&lt;a href=&quot;#-1&quot; class=&quot;headerlink&quot; title=&quot;~&quot;&gt;&lt;/a&gt;~&lt;/h2&gt;&lt;h2 id=&quot;-2&quot;&gt;&lt;a href=&quot;#-2&quot; class=&quot;headerlink&quot; title=&quot;^&quot;&gt;&lt;/a&gt;^&lt;/h2&gt;&lt;h2 id=&quot;lt-lt&quot;&gt;&lt;a href=&quot;#lt-lt&quot; class=&quot;headerlink&quot; title=&quot;&amp;lt;&amp;lt;&quot;&gt;&lt;/a&gt;&amp;lt;&amp;lt;&lt;/h2&gt;&lt;h2 id=&quot;gt-gt&quot;&gt;&lt;a href=&quot;#gt-gt&quot; class=&quot;headerlink&quot; title=&quot;&amp;gt;&amp;gt;&quot;&gt;&lt;/a&gt;&amp;gt;&amp;g</summary>
      
    
    
    
    <category term="java" scheme="https://carl-zk.github.io/blog/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>神器：查Class所在jar包</title>
    <link href="https://carl-zk.github.io/blog/2018/05/09/%E7%A5%9E%E5%99%A8%EF%BC%9A%E6%9F%A5class%E6%89%80%E5%9C%A8jar%E5%8C%85/"/>
    <id>https://carl-zk.github.io/blog/2018/05/09/%E7%A5%9E%E5%99%A8%EF%BC%9A%E6%9F%A5class%E6%89%80%E5%9C%A8jar%E5%8C%85/</id>
    <published>2018-05-08T23:25:04.000Z</published>
    <updated>2024-05-18T08:19:43.204Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/wo541075754/article/details/48243403&quot;&gt;https://blog.csdn.net/wo541075754/article/details/48243403&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;lin</summary>
      
    
    
    
    <category term="java" scheme="https://carl-zk.github.io/blog/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL数据修复</title>
    <link href="https://carl-zk.github.io/blog/2018/04/27/MySQL%E6%95%B0%E6%8D%AE%E4%BF%AE%E5%A4%8D/"/>
    <id>https://carl-zk.github.io/blog/2018/04/27/MySQL%E6%95%B0%E6%8D%AE%E4%BF%AE%E5%A4%8D/</id>
    <published>2018-04-27T14:43:44.000Z</published>
    <updated>2024-05-18T08:19:43.157Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;A、B数据库使用otter实时同步，但是有数据不一致情况，需要做数据修复。&lt;br&gt;因为没有找到合适的工具，所以自己写了些脚本来做处理，配合人工检查和过滤，99.9%的数据得以修复。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;思路：&quot;&gt;&lt;a href=&quot;#思路：&quot; class=&quot;headerlink&quot; title=&quot;思路：&quot;&gt;&lt;/a&gt;思路：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;以A、B中的同一张表t举例，首先拿到 A.t 和 B.t 的INSERT语句，提取ID相同的不同数据；&lt;/li&gt;
&lt;li&gt;拼接update语句：&lt;br&gt;a. ID为奇数，取A.t中的数据；&lt;br&gt;b. ID为偶数，取B.t中的数据；&lt;/li&gt;
&lt;li&gt;在A、B中执行此update即可。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;具体实现与思路不一致，下面是具体实现。&lt;/p&gt;
&lt;h2 id=&quot;第一步，找不同&quot;&gt;&lt;a href=&quot;#第一步，找不同&quot; class=&quot;headerlink&quot; title=&quot;第一步，找不同&quot;&gt;&lt;/a&gt;第一步，找不同&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;取表名；&lt;/li&gt;
&lt;li&gt;导出每</summary>
      
    
    
    
    
    <category term="shell" scheme="https://carl-zk.github.io/blog/tags/shell/"/>
    
    <category term="MySQL" scheme="https://carl-zk.github.io/blog/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="https://carl-zk.github.io/blog/2018/04/26/redis/"/>
    <id>https://carl-zk.github.io/blog/2018/04/26/redis/</id>
    <published>2018-04-26T01:14:31.000Z</published>
    <updated>2024-05-18T08:19:43.166Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;docker run –rm -p 6379:6379 redis –requirepass “password”&lt;br&gt;注意：redis-cli 连接需密码的server时，不输密码也可以进入命令模式，只有当执行命令时才报错。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Redis-安装启动&quot;&gt;&lt;a href=&quot;#Redis-安装启动&quot; class=&quot;headerlink&quot; title=&quot;Redis 安装启动&quot;&gt;&lt;/a&gt;Redis 安装启动&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://redis.io/download&quot;&gt;download&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span cl</summary>
      
    
    
    
    
    <category term="redis" scheme="https://carl-zk.github.io/blog/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate</title>
    <link href="https://carl-zk.github.io/blog/2018/04/19/hibernate/"/>
    <id>https://carl-zk.github.io/blog/2018/04/19/hibernate/</id>
    <published>2018-04-19T14:30:51.000Z</published>
    <updated>2024-05-18T08:19:43.164Z</updated>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hibernate-结果集映射&quot;&gt;&lt;a href=&quot;#hibernate-结果集映射&quot; class=&quot;headerlink&quot; title=&quot;hibernate 结果集映射&quot;&gt;&lt;/a&gt;hibernate 结果集映射&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://peijunlin2008.iteye.com/blog/1269266&quot;&gt;http://peijunlin2008.iteye.com/blog/1269266&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Result-gt-Map&quot;&gt;&lt;a href=&quot;#Result-gt-Map&quot; class=&quot;headerlink&quot; title=&quot;Result -&amp;gt; Map&quot;&gt;&lt;/a&gt;Result -&amp;gt; Map&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;</summary>
      
    
    
    
    
    <category term="hibernate" scheme="https://carl-zk.github.io/blog/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>When IntelliJ Goes Fool</title>
    <link href="https://carl-zk.github.io/blog/2018/04/18/when-IntelliJ-goes-fool/"/>
    <id>https://carl-zk.github.io/blog/2018/04/18/when-IntelliJ-goes-fool/</id>
    <published>2018-04-17T16:20:47.000Z</published>
    <updated>2024-05-18T08:19:43.183Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;hehe&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当已经被公认是最好用的工具后，并且你已经使用了很久，而且它也从未让你感到失望。&lt;br&gt;直到出现某一时刻，它卡顿了，它莫名其妙的提示一些你关也关不掉的信息，&lt;br&gt;你终于被弄疯掉了！！！&lt;/p&gt;
&lt;p&gt;这就是我这次使用IDEA的感受。&lt;/p&gt;
&lt;p&gt;建的包‘moc.oreh’在没有mark源文件root时只是作为了一个文件夹的名字！这样idea就死活找不到某个类，提示信息只是‘can not resolve symbol ‘moc’ ’，懵懂的我可能太较真，关不掉这个提示信息让我无法忍受，所以我尝试了漫长的求知之旅。&lt;br&gt;我去&lt;code&gt;/Applications/IntelliJ IDEA.app/Contents&lt;/code&gt;，&lt;br&gt;&lt;code&gt;/Users/hero/Library/Preferences/IntelliJIdea2018.1&lt;/code&gt;,&lt;br&gt;&lt;code&gt;/Users/hero/Library/Caches/IntelliJIdea2018.1/caches&lt;/code&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Mysql Server</title>
    <link href="https://carl-zk.github.io/blog/2018/04/06/mysql-server/"/>
    <id>https://carl-zk.github.io/blog/2018/04/06/mysql-server/</id>
    <published>2018-04-06T11:21:31.000Z</published>
    <updated>2024-05-18T08:19:43.166Z</updated>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;忘记-root-密码&quot;&gt;&lt;a href=&quot;#忘记-root-密码&quot; class=&quot;headerlink&quot; title=&quot;忘记 root 密码&quot;&gt;&lt;/a&gt;忘记 root 密码&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;mysql server version : 5.7.9+&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;查找MySQL sever 安装位置&lt;br&gt;sudo find &amp;#x2F; -name “mysqld”&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;停服务&lt;br&gt;ps -ef|grep mysql&lt;br&gt;sudo kill -9 pid1 pid2			&lt;/li&gt;
&lt;li&gt;重启&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysqld_safe --skip-grant-tables &amp;amp;&lt;/span&gt;&lt;br&gt;</summary>
      
    
    
    
    <category term="系统配置" scheme="https://carl-zk.github.io/blog/categories/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="MySQL" scheme="https://carl-zk.github.io/blog/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Median of Two Sorted Arrays</title>
    <link href="https://carl-zk.github.io/blog/2018/04/01/Median-of-Two-Sorted-Arrays/"/>
    <id>https://carl-zk.github.io/blog/2018/04/01/Median-of-Two-Sorted-Arrays/</id>
    <published>2018-04-01T03:32:59.000Z</published>
    <updated>2024-05-18T08:19:43.156Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;我相信这道题肯定不是让用这种方法，但是块拷贝的确比分析情况简单多了。&lt;/p&gt;
&lt;p&gt;There are two sorted arrays nums1 and nums2 of size m and n respectively.&lt;/p&gt;
&lt;p&gt;Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).&lt;/p&gt;
&lt;p&gt;Example 1:&lt;br&gt;nums1 &amp;#x3D; [1, 3]&lt;br&gt;nums2 &amp;#x3D; [2]&lt;/p&gt;
&lt;p&gt;The median is 2.0&lt;br&gt;Example 2:&lt;br&gt;nums1 &amp;#x3D; [1, 2]&lt;br&gt;nums2 &amp;#x3D; [3, 4]&lt;/p&gt;
&lt;p&gt;The median is (2 + 3)&amp;#x2F;2 &amp;#x3D; 2.5&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/median-of-two-sorted-arrays/descripti</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="https://carl-zk.github.io/blog/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Longest Substring No Repeat</title>
    <link href="https://carl-zk.github.io/blog/2018/04/01/Longest-Substring-no-Repeat/"/>
    <id>https://carl-zk.github.io/blog/2018/04/01/Longest-Substring-no-Repeat/</id>
    <published>2018-04-01T02:46:40.000Z</published>
    <updated>2024-05-18T08:19:43.156Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;没有所谓的水题，只有解题的思想够不够先进。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Given a string, find the length of the longest substring without repeating characters.&lt;/p&gt;
&lt;p&gt;Examples:&lt;br&gt;Given “abcabcbb”, the answer is “abc”, which the length is 3.&lt;br&gt;Given “bbbbb”, the answer is “b”, with the length of 1.&lt;br&gt;Given “pwwkew”, the answer is “wke”, with the length of 3. Note that the answer must be a substring, “pwke” is a subsequence and not a substring.&lt;/p&gt;
&lt;p&gt;需要做两项工作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;查字符是否与当前连续子串重复；&lt;/li&gt;
&lt;li&gt;计算当前子串长度；&lt;</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="https://carl-zk.github.io/blog/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Add Two Numbers</title>
    <link href="https://carl-zk.github.io/blog/2018/04/01/Add-Two-Numbers/"/>
    <id>https://carl-zk.github.io/blog/2018/04/01/Add-Two-Numbers/</id>
    <published>2018-03-31T17:25:04.000Z</published>
    <updated>2024-05-18T08:19:43.147Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;水题系列&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.&lt;/p&gt;
&lt;p&gt;You may assume the two numbers do not contain any leading zero, except the number 0 itself.&lt;/p&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="https://carl-zk.github.io/blog/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Two Sum(递归)</title>
    <link href="https://carl-zk.github.io/blog/2018/04/01/Two-Sum-%E9%80%92%E5%BD%92/"/>
    <id>https://carl-zk.github.io/blog/2018/04/01/Two-Sum-%E9%80%92%E5%BD%92/</id>
    <published>2018-03-31T16:03:25.000Z</published>
    <updated>2024-05-18T08:19:43.162Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;HDU可能是人太多，服务器撑不住总是挂，故转战 LeetCode。&lt;br&gt;LeetCode 可以看到测试数据，方便debug，这一点真是太赞了。&lt;br&gt;这道题我提交了13次，花了。。。3 个小时？哈哈，醉了，弱爆了。看来以后有空可以多刷刷题。&lt;/p&gt;
&lt;p&gt;Given an array of integers, return indices of the two numbers such that they add up to a specific target.&lt;br&gt;You may assume that each input would have exactly one solution, and you may not use the same element twice.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;b</summary>
      
    
    
    
    
    <category term="递归" scheme="https://carl-zk.github.io/blog/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>Trie树(字典树)</title>
    <link href="https://carl-zk.github.io/blog/2018/03/31/trie%E6%A0%91-%E5%AD%97%E5%85%B8%E6%A0%91/"/>
    <id>https://carl-zk.github.io/blog/2018/03/31/trie%E6%A0%91-%E5%AD%97%E5%85%B8%E6%A0%91/</id>
    <published>2018-03-31T06:24:04.000Z</published>
    <updated>2024-05-18T08:19:43.168Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;字典树就是根据字母查单词，假设全都是小写字母，&lt;br&gt;根节点的 key &amp;#x3D; ‘ ‘，在第一层;&lt;br&gt;第二层最多26个节点，即 key &amp;#x3D; a 到 z;&lt;br&gt;第三层最多26^26个节点，以此类推，最底层的高度为最长单词的长度。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1004&quot;&gt;hdu1004&lt;/a&gt;&lt;br&gt;&lt;code&gt;AC code&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;lin</summary>
      
    
    
    
    <category term="数据结构" scheme="https://carl-zk.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>最小生成树</title>
    <link href="https://carl-zk.github.io/blog/2018/03/31/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    <id>https://carl-zk.github.io/blog/2018/03/31/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</id>
    <published>2018-03-31T03:56:16.000Z</published>
    <updated>2024-05-18T08:19:43.202Z</updated>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Prim-算法&quot;&gt;&lt;a href=&quot;#Prim-算法&quot; class=&quot;headerlink&quot; title=&quot;Prim 算法&quot;&gt;&lt;/a&gt;Prim 算法&lt;/h3&gt;&lt;p&gt;假设所求图是连通的，求它的最小连通图。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设集合S为已确定的局部最小连通图，初始时S&amp;#x3D;{a}，a为任意一点；&lt;/li&gt;
&lt;li&gt;找出与S中连接着的权值最小的点t，将它加入集合S中；&lt;br&gt;重复步骤 2 直至所有点均连通。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Prim 算法跟单源最短路径算法 Dijkstra 很像，唯一不同的是在更新dist时，单源最短路径的做法是&lt;br&gt;&lt;code&gt;dist[v] = min(dist[v], dist[u] + cost[u][v])&lt;/code&gt;&lt;br&gt;而 Prim 的做法是&lt;br&gt;&lt;code&gt;dist[v] = min(dist[v], cost[u][v])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1233&quot;&gt;hdu1233&lt;/a&gt;&lt;br&gt;&lt;code&gt;A</summary>
      
    
    
    
    <category term="数据结构" scheme="https://carl-zk.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>单源最短路径Dijkstra+PriorityQueue优化</title>
    <link href="https://carl-zk.github.io/blog/2018/03/30/%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84Dijkstra-PriorityQueue%E4%BC%98%E5%8C%96/"/>
    <id>https://carl-zk.github.io/blog/2018/03/30/%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84Dijkstra-PriorityQueue%E4%BC%98%E5%8C%96/</id>
    <published>2018-03-30T15:04:17.000Z</published>
    <updated>2024-05-18T08:19:43.195Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;无向图中，权值&amp;gt;&amp;#x3D;0，找出从节点s到t的最短距离：&lt;br&gt;令d[i]为从s到i的最短距离，则从s到i的最短路径不会再变更，以后再更新d，d[i]也不会改变，那么与i相邻的其它节点的最短距离也就随之确定：&lt;br&gt;d[j] &amp;#x3D; min(d[j], d[i] + (从i到j的权值))，j &amp;#x3D; 1，2，3….&lt;br&gt;更新完与i相邻的节点j后，d[j]也就固定下来了，再从d[j]中选取一个 距离最小的 &amp;amp;&amp;amp; 还未固定下来 的节点，直到所有节点的距离都固定下来为止。&lt;br&gt;这就是Dijkstra算法。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;b</summary>
      
    
    
    
    <category term="数据结构" scheme="https://carl-zk.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>并查集</title>
    <link href="https://carl-zk.github.io/blog/2018/03/30/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>https://carl-zk.github.io/blog/2018/03/30/%E5%B9%B6%E6%9F%A5%E9%9B%86/</id>
    <published>2018-03-30T01:55:18.000Z</published>
    <updated>2024-05-18T08:19:43.201Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;并查集主要处理&lt;strong&gt;集合&lt;/strong&gt;，它可以快速&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;判断一个元素e是否属于集合S；&lt;/li&gt;
&lt;li&gt;合并两个集合；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;删除一个元素e；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1272&quot;&gt;hdu1272&lt;/a&gt;&lt;br&gt;题目的要求有两点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;所有房间都联通；&lt;/li&gt;
&lt;li&gt;不存在回路（环）；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;即 节点个数&amp;#x3D;边数+1&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AC code&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;</summary>
      
    
    
    
    <category term="数据结构" scheme="https://carl-zk.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>分治-最大子段和</title>
    <link href="https://carl-zk.github.io/blog/2018/03/17/%E5%88%86%E6%B2%BB-%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C/"/>
    <id>https://carl-zk.github.io/blog/2018/03/17/%E5%88%86%E6%B2%BB-%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C/</id>
    <published>2018-03-17T02:58:02.000Z</published>
    <updated>2024-05-18T08:19:43.194Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;最近心血来潮想写点算法、数据结构的代码，所以就又拿出《算法导论》温习了一遍分治算法。&lt;br&gt;本来以为自己对分治算法已经了解的很深了，但是重新看一遍才发现，实现分治算法并不难，难点在于对实际问题向分治算法的转变。书中给出的问题是找出连续N天股票买入卖出能获得的最大收益，这个问题用了相对值的角度一变形就成为了一个能够用分治策略解决的问题。所谓人才和平庸的差距，可能就在这个转化里面吧。&lt;br&gt;分治算法就是把一个大问题拆分成N个相同类型的小问题(即小规模的问题)，然后通过解决每个小问题来求解大问题：&lt;br&gt;&lt;img src=&quot;/blog/2018/03/17/%E5%88%86%E6%B2%BB-%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C/dm.svg&quot; loading=&quot;lazy&quot;&gt;&lt;br&gt;对于每个问题，都有T(N)&amp;#x3D;2T(N&amp;#x2F;2)，其中T代表解决问题的时间代价。对它求解可得T(N)&amp;#x3D;O(NlgN)。&lt;/p&gt;
&lt;h2 id=&quot;最大子段和&quot;&gt;&lt;a href=&quot;#最大子段和&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="数据结构" scheme="https://carl-zk.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>快速Byte数组转int数组探索</title>
    <link href="https://carl-zk.github.io/blog/2018/03/14/%E5%BF%AB%E9%80%9Fbyte%E6%95%B0%E7%BB%84%E8%BD%ACint%E6%95%B0%E7%BB%84%E6%8E%A2%E7%B4%A2/"/>
    <id>https://carl-zk.github.io/blog/2018/03/14/%E5%BF%AB%E9%80%9Fbyte%E6%95%B0%E7%BB%84%E8%BD%ACint%E6%95%B0%E7%BB%84%E6%8E%A2%E7%B4%A2/</id>
    <published>2018-03-14T15:34:08.000Z</published>
    <updated>2024-05-18T08:19:43.201Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;如何快速的将byte数组转成int数组？&lt;br&gt;先不考虑为什么要这样转，想想如何实现才能高效的转换！&lt;br&gt;大家应该都用过System的这个方法：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;native&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;arraycopy&lt;/span&gt;&lt;span class=&quot;params&quot;</summary>
      
    
    
    
    <category term="java" scheme="https://carl-zk.github.io/blog/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>快速排序</title>
    <link href="https://carl-zk.github.io/blog/2018/03/11/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <id>https://carl-zk.github.io/blog/2018/03/11/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</id>
    <published>2018-03-11T11:03:33.000Z</published>
    <updated>2024-05-18T08:19:43.201Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;这里写了个快速排序的工具类，简单写一下它的工作方式吧。&lt;br&gt;&lt;img src=&quot;/blog/2018/03/11/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/quicksort.svg&quot; loading=&quot;lazy&quot;&gt;&lt;br&gt;有数组[4,3,5,2]如图，&lt;br&gt;1.取第一个元素赋给临时变量v，循环结束时，v左边的都小于v，v右边的都大于v;&lt;br&gt;2.以v为中心划分，得到两个小数组，递归1；&lt;/p&gt;
&lt;p&gt;快速排序虽然使用了递归，但是由于是log(n)，所以栈的深度并不高，就算是Integer.MAX_VALUE的数组，栈顶多31层。&lt;br&gt;它是最常用的排序算法了吧应该，有人说堆排序和快速排序都是O(nlogn)，堆没有递归，所以堆排序比快速排序更好。有没有递归并不能决定一个算法的好坏，其实好与不好要看使用场景的，如果仅仅是对一个数组排一下序，选快速排序；如果要一直维护一个有序队列，选堆排序。&lt;br&gt;快速排序的理想时间复杂度是O(nlogn)，为什么说是理想呢，因为如果待排序的数组正好是倒序的，快速排序的分治策略就很差了，它总是把左右数组分为大小</summary>
      
    
    
    
    <category term="数据结构" scheme="https://carl-zk.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>堆(数据结构)</title>
    <link href="https://carl-zk.github.io/blog/2018/03/10/%E5%A0%86-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://carl-zk.github.io/blog/2018/03/10/%E5%A0%86-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2018-03-10T13:46:15.000Z</published>
    <updated>2024-05-18T08:19:43.196Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;上一篇博客中用到了优先队列，它的内部是用堆实现的，这篇就来回忆一下堆是怎么实现的。&lt;br&gt;堆是一棵&lt;a href=&quot;https://baike.baidu.com/link?url=VXtjCF0qfzxdQNguCXoD888GiGKL_E9kKTRIfYr2RSHWJ2BxEx1aFbOzSfofPk4ZkBqva2Ag18E48EqUVfUXCbvn8qJolkJ2dEI0HLa67vRxMkg7s4I_Z1lqtijaZQWbslBx1W0wwiDhtxtYtA20Sa&quot;&gt;完全二叉树&lt;/a&gt;，即&lt;br&gt;&lt;img src=&quot;/blog/blog/2018/03/10/%E5%A0%86-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/bintree.svg&quot; alt=&quot;完全二叉树&quot; loading=&quot;lazy&quot;&gt;&lt;br&gt;数字0，1，2……代表节点的下标，即一维数组中元素的位置。&lt;br&gt;第k个节点的左右子节点分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2*k + 1    左孩子&lt;/li&gt;
&lt;li&gt;2*k + 2    右孩子&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第</summary>
      
    
    
    
    <category term="数据结构" scheme="https://carl-zk.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>超时30分钟自动取消订单</title>
    <link href="https://carl-zk.github.io/blog/2018/03/08/%E8%B6%85%E6%97%B630%E5%88%86%E9%92%9F%E8%87%AA%E5%8A%A8%E5%8F%96%E6%B6%88%E8%AE%A2%E5%8D%95/"/>
    <id>https://carl-zk.github.io/blog/2018/03/08/%E8%B6%85%E6%97%B630%E5%88%86%E9%92%9F%E8%87%AA%E5%8A%A8%E5%8F%96%E6%B6%88%E8%AE%A2%E5%8D%95/</id>
    <published>2018-03-08T14:16:27.000Z</published>
    <updated>2024-05-18T08:19:43.210Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;想象一个队列，你可以放任务进去，并且设置每个任务要延迟几分钟后执行。&lt;br&gt;这里的关键点就是延迟执行，如何保证每个任务按延时时间执行呢？可以把任务按延时时间从小到大排序，每次取第一个，依次取下去直到队列为空。假设取出的第一个任务到时间T才能执行，那么sleep(T-currentTime)之后就可以执行，即：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(queue.size &amp;gt; &lt;span class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>如何优雅的番蔷</title>
    <link href="https://carl-zk.github.io/blog/2018/03/03/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E7%95%AA%E8%94%B7/"/>
    <id>https://carl-zk.github.io/blog/2018/03/03/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E7%95%AA%E8%94%B7/</id>
    <published>2018-03-03T12:59:14.000Z</published>
    <updated>2024-05-18T08:19:43.197Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;教大家如何翻墙。&lt;br&gt;本来以为这个博客不会有人看的，意外的是竟然有人通过这个博客加我微信，还有人通过这个博客能了解我是个什么样的人，让我找工作时不用怎么美化自己对方也能看到我的&lt;strong&gt;潜力&lt;/strong&gt;。我觉得以后要加点个人介绍什么的，免得每次面试都要先来个自我介绍，感觉很不自在。&lt;br&gt;从我上大学接触编程开始，会翻墙似乎成了一种基本素养。&lt;br&gt;曾经以为&lt;em&gt;自由门&lt;/em&gt;会用一辈子，但是还没念到大四就不好用了。以前还可以搜没有封掉的Google server IP，配置一下hosts文件，但是现如今这招大概也不灵了吧。其它的什么蓝灯工具应该也只是好用了一阵，免费的翻墙工具基本上都不好使了。为了使祖国更加强大，从事“科学研究”的我们只能想办法搞到一手资料，避免落后挨打的局面。祖国万岁！我爱你！&lt;br&gt;我不记得是从什么时候开始用&lt;a href=&quot;https://github.com/XX-net/XX-Net&quot;&gt;XX-Net&lt;/a&gt;的，忘记了是怎么知道它的。好像是我用自由门翻墙时，Google出来的，当年为了能有个备用的翻墙工具（那个时候自由门还是最好用的翻墙工</summary>
      
    
    
    
    <category term="系统配置" scheme="https://carl-zk.github.io/blog/categories/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>JAVA与尾递归</title>
    <link href="https://carl-zk.github.io/blog/2018/01/22/JAVA%E4%B8%8E%E5%B0%BE%E9%80%92%E5%BD%92/"/>
    <id>https://carl-zk.github.io/blog/2018/01/22/JAVA%E4%B8%8E%E5%B0%BE%E9%80%92%E5%BD%92/</id>
    <published>2018-01-22T12:54:11.000Z</published>
    <updated>2024-05-18T08:19:43.150Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/dm_vincent/article/details/40581859&quot;&gt;[Java 8] (8) Lambda表达式对递归的优化(上) - 使用尾递归&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.cnblogs.com/bellkosmos/p/5280619.html&quot;&gt;在Java中谈尾递归–尾递归和垃圾回收的比较&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;什么是“尾递归”&lt;br&gt;深度为1的递归调用，称为尾递归。&lt;br&gt;举个例子，如果求整数n到1的和，通常的递归写法大都这样：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;sp</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>第9章 类和模块</title>
    <link href="https://carl-zk.github.io/blog/2018/01/08/%E7%AC%AC9%E7%AB%A0-%E7%B1%BB%E5%92%8C%E6%A8%A1%E5%9D%97/"/>
    <id>https://carl-zk.github.io/blog/2018/01/08/%E7%AC%AC9%E7%AB%A0-%E7%B1%BB%E5%92%8C%E6%A8%A1%E5%9D%97/</id>
    <published>2018-01-08T14:08:04.000Z</published>
    <updated>2024-05-18T08:19:43.205Z</updated>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;类和构造函数&quot;&gt;&lt;a href=&quot;#类和构造函数&quot; class=&quot;headerlink&quot; title=&quot;类和构造函数&quot;&gt;&lt;/a&gt;类和构造函数&lt;/h2&gt;&lt;p&gt;构造函数的 prototype 属性被用作新对象的原型。这就意味着通过同一个构造函数创建的所有对象都继承自同一个对象。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    
    <category term="javascript" scheme="https://carl-zk.github.io/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>第3章 类型、值和变量</title>
    <link href="https://carl-zk.github.io/blog/2017/12/30/%E7%AC%AC3%E7%AB%A0-%E7%B1%BB%E5%9E%8B%E3%80%81%E5%80%BC%E5%92%8C%E5%8F%98%E9%87%8F/"/>
    <id>https://carl-zk.github.io/blog/2017/12/30/%E7%AC%AC3%E7%AB%A0-%E7%B1%BB%E5%9E%8B%E3%80%81%E5%80%BC%E5%92%8C%E5%8F%98%E9%87%8F/</id>
    <published>2017-12-30T05:34:06.000Z</published>
    <updated>2024-05-18T08:19:43.205Z</updated>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数字&quot;&gt;&lt;a href=&quot;#数字&quot; class=&quot;headerlink&quot; title=&quot;数字&quot;&gt;&lt;/a&gt;数字&lt;/h2&gt;&lt;p&gt;JavaScript不区分整数值和浮点数值，&lt;br&gt;浮点数的范围是[-5*10^-324, 1.7976931348623157*10^308]，&lt;br&gt;整数范围是[-2^53, 2^53]&lt;br&gt;需要注意的是，数字的索引值是基于32位整数的！！！&lt;/p&gt;
&lt;h3 id=&quot;整型直接量&quot;&gt;&lt;a href=&quot;#整型直接量&quot; class=&quot;headerlink&quot; title=&quot;整型直接量&quot;&gt;&lt;/a&gt;整型直接量&lt;/h3&gt;&lt;p&gt;0&lt;br&gt;3&lt;br&gt;100000000&lt;br&gt;还可以是十六进制：&lt;br&gt;0xff	&amp;#x2F;&amp;#x2F; 255&lt;br&gt;0XCAF893&lt;/p&gt;
&lt;h3 id=&quot;浮点型直接量&quot;&gt;&lt;a href=&quot;#浮点型直接量&quot; class=&quot;headerlink&quot; title=&quot;浮点型直接量&quot;&gt;&lt;/a&gt;浮点型直接量&lt;/h3&gt;&lt;p&gt;3.14&lt;br&gt;.33333&lt;br&gt;6.02e23 	&amp;#x2F;&amp;#x2F; 6.02*10^23&lt;/p&gt;
&lt;h3 </summary>
      
    
    
    
    
    <category term="javascript" scheme="https://carl-zk.github.io/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>第2章 词法结构</title>
    <link href="https://carl-zk.github.io/blog/2017/12/30/%E7%AC%AC2%E7%AB%A0-%E8%AF%8D%E6%B3%95%E7%BB%93%E6%9E%84/"/>
    <id>https://carl-zk.github.io/blog/2017/12/30/%E7%AC%AC2%E7%AB%A0-%E8%AF%8D%E6%B3%95%E7%BB%93%E6%9E%84/</id>
    <published>2017-12-30T04:29:24.000Z</published>
    <updated>2024-05-18T08:19:43.205Z</updated>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;字符集&quot;&gt;&lt;a href=&quot;#字符集&quot; class=&quot;headerlink&quot; title=&quot;字符集&quot;&gt;&lt;/a&gt;字符集&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Unicode字符集编写。&lt;/strong&gt;&lt;br&gt;UTF-16编码的Unicode编码，也就是说我用汉字定义变量和函数名也是可以的。&lt;br&gt;&lt;strong&gt;区分大小写&lt;/strong&gt;&lt;br&gt;特别注意的是HTML并不区分大小写。&lt;br&gt;&lt;strong&gt;空格、换行符&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;</summary>
      
    
    
    
    
    <category term="javascript" scheme="https://carl-zk.github.io/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Javascript权威指南</title>
    <link href="https://carl-zk.github.io/blog/2017/12/30/javascript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/"/>
    <id>https://carl-zk.github.io/blog/2017/12/30/javascript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/</id>
    <published>2017-12-30T03:05:29.000Z</published>
    <updated>2024-05-18T08:19:43.164Z</updated>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; class=&quot;headerlink&quot; title=&quot;一、概述&quot;&gt;&lt;/a&gt;一、概述&lt;/h2&gt;&lt;h3 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    
    <category term="javascript" scheme="https://carl-zk.github.io/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>页面输入控制</title>
    <link href="https://carl-zk.github.io/blog/2017/12/28/%E9%A1%B5%E9%9D%A2%E8%BE%93%E5%85%A5%E6%8E%A7%E5%88%B6/"/>
    <id>https://carl-zk.github.io/blog/2017/12/28/%E9%A1%B5%E9%9D%A2%E8%BE%93%E5%85%A5%E6%8E%A7%E5%88%B6/</id>
    <published>2017-12-28T11:42:29.000Z</published>
    <updated>2024-05-18T08:19:43.211Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;没想到前端页面的输入框要控那么细，数值类的输入框只能输入数字，其它字符都不允许输入，连切换输入法后的中文或拷贝的字母都不允许输入，在此特意准备了一下这类限制的js实现，嗯，用起来完美了许多。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;输入框限制&quot;&gt;&lt;a href=&quot;#输入框限制&quot; class=&quot;headerlink&quot; title=&quot;输入框限制&quot;&gt;&lt;/a&gt;输入框限制&lt;/h4&gt;&lt;p&gt;common.js&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/sp</summary>
      
    
    
    
    
    <category term="javascript" scheme="https://carl-zk.github.io/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>类加载和类的初始化</title>
    <link href="https://carl-zk.github.io/blog/2017/12/24/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%92%8C%E7%B1%BB%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>https://carl-zk.github.io/blog/2017/12/24/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%92%8C%E7%B1%BB%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96/</id>
    <published>2017-12-24T08:07:23.000Z</published>
    <updated>2024-05-18T08:19:43.207Z</updated>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;类加载&quot;&gt;&lt;a href=&quot;#类加载&quot; class=&quot;headerlink&quot; title=&quot;类加载&quot;&gt;&lt;/a&gt;类加载&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1</summary>
      
    
    
    
    <category term="java" scheme="https://carl-zk.github.io/blog/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>Websocket</title>
    <link href="https://carl-zk.github.io/blog/2017/12/16/websocket/"/>
    <id>https://carl-zk.github.io/blog/2017/12/16/websocket/</id>
    <published>2017-12-16T05:06:35.000Z</published>
    <updated>2024-05-18T08:19:43.169Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.imooc.com/video/15319&quot;&gt;https://www.imooc.com/video/15319&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.websocket.org/&quot;&gt;https://www.websocket.org/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/sitegui/nodejs-websocket&quot;&gt;https://github.com/sitegui/nodejs-websocket&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://socket.io/&quot;&gt;https://socket.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;websocket 允许浏览器和服务器建立持久连接，借助nodejs-websocket实现群聊功能。&lt;/p&gt;
&lt;h4 id=&quot;Echo&quot;&gt;&lt;a href=&quot;#Echo&quot; class=&quot;headerlink&quot; title=&quot;Echo&quot;&gt;&lt;/a&gt;Echo&lt;/h4&gt;&lt;p&gt;wsSocket.js&lt;/p&gt;
&lt;figure class=&quot;highlight js</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>vert.x</title>
    <link href="https://carl-zk.github.io/blog/2017/12/04/vert-x/"/>
    <id>https://carl-zk.github.io/blog/2017/12/04/vert-x/</id>
    <published>2017-12-04T11:52:06.000Z</published>
    <updated>2024-05-18T08:19:43.169Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://vertx.io/&quot;&gt;http://vertx.io/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;什么是vert-x&quot;&gt;&lt;a href=&quot;#什么是vert-x&quot; class=&quot;headerlink&quot; title=&quot;什么是vert.x&quot;&gt;&lt;/a&gt;什么是vert.x&lt;/h3&gt;&lt;p&gt;官方是这么说的：Eclipse Vert.x 是在 JVM 上构建响应式应用的工具，它&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可扩展：事件驱动、无阻塞；&lt;/li&gt;
&lt;li&gt;多语言支持：Java, JavaScript, Groovy, Ruby, Ceylon, Scala and Kotlin；&lt;/li&gt;
&lt;li&gt;有趣：（？serious）&lt;/li&gt;
&lt;li&gt;轻量级：Vert.x core 只有 650k 左右；&lt;/li&gt;
&lt;li&gt;快&lt;/li&gt;
&lt;li&gt;模块化&lt;/li&gt;
&lt;li&gt;简洁而不简单：（哈哈，我翻译的太好了）&lt;br&gt;这真是居家旅行、杀人灭口、构建轻量级、高性能、微服务的首选啊！&lt;/li&gt;
&lt;/ul&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Rocket.Chat</title>
    <link href="https://carl-zk.github.io/blog/2017/12/02/Rocket-Chat/"/>
    <id>https://carl-zk.github.io/blog/2017/12/02/Rocket-Chat/</id>
    <published>2017-12-02T05:09:12.000Z</published>
    <updated>2024-05-18T08:19:43.160Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://blog.topspeedsnail.com/archives/3767&quot;&gt;在Ubuntu上安装、配置和部署Rocket.Chat&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;RocketChat-是什么&quot;&gt;&lt;a href=&quot;#RocketChat-是什么&quot; class=&quot;headerlink&quot; title=&quot;RocketChat 是什么&quot;&gt;&lt;/a&gt;RocketChat 是什么&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://rocket.chat/&quot;&gt;官网&lt;/a&gt;&lt;br&gt;Rocket.Chat 是一个开源的通讯工具，可以视频&amp;#x2F;音频会议、文件共享、屏幕分享、双因素认证等等。可以简单理解为企业版的qq。但是比qq强大，在聊天时可以实时翻译，只不过这是人家公司提供的云服务，不是免费的，如果自己搭就得想办法配置。支持浏览器、桌面系统（Windows、Linux、MacosOS）、移动端（iOS、Android）。&lt;/p&gt;
&lt;h4 id=&quot;语言、框架&quot;&gt;&lt;a href=&quot;#语言、框架&quot; class=&quot;headerlink&quot; title=&quot;语言、框架&quot;&gt;&lt;/a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JVM参数那点事儿</title>
    <link href="https://carl-zk.github.io/blog/2017/11/18/JVM%E5%8F%82%E6%95%B0%E9%82%A3%E7%82%B9%E4%BA%8B%E5%84%BF/"/>
    <id>https://carl-zk.github.io/blog/2017/11/18/JVM%E5%8F%82%E6%95%B0%E9%82%A3%E7%82%B9%E4%BA%8B%E5%84%BF/</id>
    <published>2017-11-18T09:01:39.000Z</published>
    <updated>2024-05-18T08:19:43.150Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/edwardlauxh/archive/2010/04/25/1918603.html&quot;&gt;JVM参数&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.cnblogs.com/redcreen/archive/2011/05/04/2037057.html&quot;&gt;JVM参数&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;mid=2651747273&amp;idx=1&amp;sn=7f947064a41eeecb6816a5d0838581ae&amp;chksm=bd12aa848a65239289d5c39264e89bd175f377f6554bfe93b37ad6498cf13deff356333c5398&amp;mpshare=1&amp;scene=1&amp;srcid=0108Pp81UenqcrqRmaMO1QNW&amp;pass_ticket=w9AQASPqUnr1vwbOOlNXlTVA9QD8RoqlKcW5/RGKjfiKy9ShiDmnCQTcz4</summary>
      
    
    
    
    <category term="java" scheme="https://carl-zk.github.io/blog/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>Weblogic使用自定义jdbc驱动</title>
    <link href="https://carl-zk.github.io/blog/2017/10/29/weblogic%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89jdbc%E9%A9%B1%E5%8A%A8/"/>
    <id>https://carl-zk.github.io/blog/2017/10/29/weblogic%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89jdbc%E9%A9%B1%E5%8A%A8/</id>
    <published>2017-10-29T15:41:21.000Z</published>
    <updated>2024-05-18T08:19:43.169Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;翻译自&lt;a href=&quot;https://docs.oracle.com/middleware/1213/wls/JDBCA/third_party_drivers.htm#JDBCA231&quot;&gt;Using JDBC Drivers with WebLogic Server&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://docs.oracle.com/cd/E13222_01/wls/docs81/jdbc/thirdparty.html#1050527&quot;&gt;Using Third-Party Drivers with WebLogic Server&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WebLogic Server 12.1.3&lt;/p&gt;
&lt;h3 id=&quot;weblogic自带的JDBC驱动&quot;&gt;&lt;a href=&quot;#weblogic自带的JDBC驱动&quot; class=&quot;headerlink&quot; title=&quot;weblogic自带的JDBC驱动&quot;&gt;&lt;/a&gt;weblogic自带的JDBC驱动&lt;/h3&gt;&lt;p&gt;The 12c version of the Oracle Thin driver is install</summary>
      
    
    
    
    
    <category term="weblogic" scheme="https://carl-zk.github.io/blog/tags/weblogic/"/>
    
  </entry>
  
  <entry>
    <title>Grub</title>
    <link href="https://carl-zk.github.io/blog/2017/10/14/grub/"/>
    <id>https://carl-zk.github.io/blog/2017/10/14/grub/</id>
    <published>2017-10-14T03:31:10.000Z</published>
    <updated>2024-05-18T08:19:43.164Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;目的：制作一个Linux和windows启动盘。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.gnu.org/software/grub/&quot;&gt;grub官网&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.linux.com/learn/how-rescue-non-booting-grub-2-Linux&quot;&gt;grub命令修复系统&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.winsetupfromusb.com/downloads/&quot;&gt;多合一启动盘制作工具 WinSetupFromUSB&lt;/a&gt;&lt;a href=&quot;http://www.iplaysoft.com/winsetupfromusb.html&quot;&gt;【WinSetupFromUSB教程】&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.pendrivelinux.com/multiboot-create-a-multiboot-usb-from-linux/&quot;&gt;MultiSystem – Create a MultiBoot USB </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>表空间、权限</title>
    <link href="https://carl-zk.github.io/blog/2017/09/23/%E8%A1%A8%E7%A9%BA%E9%97%B4%E3%80%81%E6%9D%83%E9%99%90/"/>
    <id>https://carl-zk.github.io/blog/2017/09/23/%E8%A1%A8%E7%A9%BA%E9%97%B4%E3%80%81%E6%9D%83%E9%99%90/</id>
    <published>2017-09-23T04:28:54.000Z</published>
    <updated>2024-05-18T08:19:43.210Z</updated>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;表空间&quot;&gt;&lt;a href=&quot;#表空间&quot; class=&quot;headerlink&quot; title=&quot;表空间&quot;&gt;&lt;/a&gt;表空间&lt;/h3&gt;&lt;h4 id=&quot;建立表空间&quot;&gt;&lt;a href=&quot;#建立表空间&quot; class=&quot;headerlink&quot; title=&quot;建立表空间&quot;&gt;&lt;/a&gt;建立表空间&lt;/h4&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt;SPACE test DATAFILE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;stri</summary>
      
    
    
    
    
    <category term="oracle" scheme="https://carl-zk.github.io/blog/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>病历</title>
    <link href="https://carl-zk.github.io/blog/2017/09/17/%E7%97%85%E5%8E%86/"/>
    <id>https://carl-zk.github.io/blog/2017/09/17/%E7%97%85%E5%8E%86/</id>
    <published>2017-09-17T13:18:53.000Z</published>
    <updated>2024-05-18T08:19:43.204Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;真是上了年纪了，偶感风寒导致咳嗽了快一个月，再加上发烧，昨天大概是最难熬的一天了。&lt;br&gt;城里的医保点开的药贵不说，关键是不起作用，无奈只好把我吃过有用的药都记录一下，下次去医保直接点。&lt;/p&gt;
&lt;h1 id=&quot;黑名单&quot;&gt;&lt;a href=&quot;#黑名单&quot; class=&quot;headerlink&quot; title=&quot;黑名单&quot;&gt;&lt;/a&gt;黑名单&lt;/h1&gt;&lt;p&gt;银黄片&lt;/p&gt;
&lt;h1 id=&quot;推荐&quot;&gt;&lt;a href=&quot;#推荐&quot; class=&quot;headerlink&quot; title=&quot;推荐&quot;&gt;&lt;/a&gt;推荐&lt;/h1&gt;&lt;h3 id=&quot;发烧感冒&quot;&gt;&lt;a href=&quot;#发烧感冒&quot; class=&quot;headerlink&quot; title=&quot;发烧感冒&quot;&gt;&lt;/a&gt;发烧感冒&lt;/h3&gt;&lt;p&gt;999板蓝根颗粒（当糖喝，反正没有副作用）&lt;br&gt;仁和可立克&lt;/p&gt;
&lt;h3 id=&quot;咳嗽&quot;&gt;&lt;a href=&quot;#咳嗽&quot; class=&quot;headerlink&quot; title=&quot;咳嗽&quot;&gt;&lt;/a&gt;咳嗽&lt;/h3&gt;&lt;p&gt;修正 利克达 清肺抑火片&lt;br&gt;TAIJI 急支糖浆（既然咳嗽，那就喝吧，反正刷医保卡）&lt;/p&gt;
&lt;h2 id=&quot;病历&quot;&gt;&lt;a hre</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Sql杂货铺</title>
    <link href="https://carl-zk.github.io/blog/2017/09/17/sql%E6%9D%82%E8%B4%A7%E9%93%BA/"/>
    <id>https://carl-zk.github.io/blog/2017/09/17/sql%E6%9D%82%E8%B4%A7%E9%93%BA/</id>
    <published>2017-09-17T04:06:51.000Z</published>
    <updated>2024-05-18T08:19:43.167Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;select * from A left join B on …以A为主表&lt;br&gt;select * from A right join B on …以B为主表&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;oracle&quot;&gt;&lt;a href=&quot;#oracle&quot; class=&quot;headerlink&quot; title=&quot;oracle&quot;&gt;&lt;/a&gt;oracle&lt;/h3&gt;&lt;h4 id=&quot;左、右连接&quot;&gt;&lt;a href=&quot;#左、右连接&quot; class=&quot;headerlink&quot; title=&quot;左、右连接&quot;&gt;&lt;/a&gt;左、右连接&lt;/h4&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;spa</summary>
      
    
    
    
    
    <category term="oracle" scheme="https://carl-zk.github.io/blog/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>使用Sql Developer调试</title>
    <link href="https://carl-zk.github.io/blog/2017/09/17/%E4%BD%BF%E7%94%A8sql-developer%E8%B0%83%E8%AF%95/"/>
    <id>https://carl-zk.github.io/blog/2017/09/17/%E4%BD%BF%E7%94%A8sql-developer%E8%B0%83%E8%AF%95/</id>
    <published>2017-09-17T02:57:28.000Z</published>
    <updated>2024-05-18T08:19:43.194Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/cn/tutorials/plsql-debug-088880-zhs.html#p&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;前提条件&quot;&gt;&lt;a href=&quot;#前提条件&quot; class=&quot;headerlink&quot; title=&quot;前提条件&quot;&gt;&lt;/a&gt;前提条件&lt;/h4&gt;&lt;p&gt;1.解锁hr用户&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;USER&lt;/span&gt; hr UNLOCK ACCOUNT; &lt;span class=&quot;comment&quot;&gt;-- or alter user xx</summary>
      
    
    
    
    
    <category term="oracle" scheme="https://carl-zk.github.io/blog/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>存储过程分页</title>
    <link href="https://carl-zk.github.io/blog/2017/09/16/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%88%86%E9%A1%B5/"/>
    <id>https://carl-zk.github.io/blog/2017/09/16/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%88%86%E9%A1%B5/</id>
    <published>2017-09-16T14:08:08.000Z</published>
    <updated>2024-05-18T08:19:43.200Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://xurichusheng.iteye.com/blog/1963741&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;创建分页存储过程&quot;&gt;&lt;a href=&quot;#创建分页存储过程&quot; class=&quot;headerlink&quot; title=&quot;创建分页存储过程&quot;&gt;&lt;/a&gt;创建分页存储过程&lt;/h3&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;b</summary>
      
    
    
    
    
    <category term="oracle" scheme="https://carl-zk.github.io/blog/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>JNDI 获取Weblogic数据源</title>
    <link href="https://carl-zk.github.io/blog/2017/09/11/JNDI-%E8%8E%B7%E5%8F%96weblogic%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
    <id>https://carl-zk.github.io/blog/2017/09/11/JNDI-%E8%8E%B7%E5%8F%96weblogic%E6%95%B0%E6%8D%AE%E6%BA%90/</id>
    <published>2017-09-11T14:30:45.000Z</published>
    <updated>2024-05-18T08:19:43.150Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Java_Naming_and_Directory_Interface&quot;&gt;JNDI&lt;/a&gt;: Java Naming and Directory Interface.&lt;/p&gt;
&lt;p&gt;java如何获取weblogic配置的数据源？&lt;br&gt;&lt;a href=&quot;https://blogs.oracle.com/luzmestre/how-to-connect-to-weblogic-datasource-from-a-java-client&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1.在weblogic中新建一个mysql数据源，&lt;code&gt;JNDI name&lt;/code&gt;设成&lt;code&gt;dbconn&lt;/code&gt;.&lt;br&gt;2.java代码&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    
    <category term="weblogic" scheme="https://carl-zk.github.io/blog/tags/weblogic/"/>
    
  </entry>
  
  <entry>
    <title>字符编码</title>
    <link href="https://carl-zk.github.io/blog/2017/09/09/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"/>
    <id>https://carl-zk.github.io/blog/2017/09/09/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</id>
    <published>2017-09-09T07:15:09.000Z</published>
    <updated>2024-05-18T08:19:43.199Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html?20151227141854&quot;&gt;字符编码笔记：ASCII，Unicode和UTF-8&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html#_4.Accept-Charset/Accept-Encoding/Ac&quot;&gt;字符集和字符编码&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://my.oschina.net/alphajay/blog/5691&quot;&gt;Unicode字符集和多字节字符集关系&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP936.TXT&quot;&gt;gbk转unicode&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;UTF8编码如何转成GBK编码呢？&lt;br&gt;UTF8—&amp;gt;unicode—-&amp;gt;GBK&lt;/p&gt;
&lt;figure c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Shiro</title>
    <link href="https://carl-zk.github.io/blog/2017/09/03/shiro/"/>
    <id>https://carl-zk.github.io/blog/2017/09/03/shiro/</id>
    <published>2017-09-03T06:23:57.000Z</published>
    <updated>2024-05-18T08:19:43.166Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;好的老师，能让你事半功倍、信心倍增。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://shiro.apache.org/&quot;&gt;shiro.apache.org&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://jinnianshilongnian.iteye.com/blog/2018398&quot;&gt;跟我学shiro&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;shiro是一个安全框架，主要模块有认证(Authentication)、授权(Authorization)、加密(Cryptography)、会话管理(Session Management).&lt;/p&gt;
&lt;p&gt;&amp;#x2F;WEB-INF&amp;#x2F;shiro.ini&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>网络编程一</title>
    <link href="https://carl-zk.github.io/blog/2017/08/27/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B8%80/"/>
    <id>https://carl-zk.github.io/blog/2017/08/27/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B8%80/</id>
    <published>2017-08-27T07:51:45.000Z</published>
    <updated>2024-05-18T08:19:43.208Z</updated>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;网络不同层的协议&quot;&gt;&lt;a href=&quot;#网络不同层的协议&quot; class=&quot;headerlink&quot; title=&quot;网络不同层的协议&quot;&gt;&lt;/a&gt;网络不同层的协议&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/blog/2017/08/27/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B8%80/net-protocol.png&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;p&gt;传输层主要协议：&lt;br&gt;TCP(Transmission Control Protocol)&lt;br&gt;UDP(User Datagram Protocol)&lt;/p&gt;
&lt;p&gt;Java支持的协议只有TCP和UDP，以及建立在它们之上的应用层协议。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="java" scheme="https://carl-zk.github.io/blog/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>Ajax</title>
    <link href="https://carl-zk.github.io/blog/2017/08/21/ajax/"/>
    <id>https://carl-zk.github.io/blog/2017/08/21/ajax/</id>
    <published>2017-08-21T15:59:47.000Z</published>
    <updated>2024-05-18T08:19:43.163Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;配起来nginx就可以学ajax了&lt;br&gt;&lt;a href=&quot;https://www.w3schools.com/xml/ajax_intro.asp&quot;&gt;ajax w3schools&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Nginx</title>
    <link href="https://carl-zk.github.io/blog/2017/08/20/nginx/"/>
    <id>https://carl-zk.github.io/blog/2017/08/20/nginx/</id>
    <published>2017-08-20T13:09:08.000Z</published>
    <updated>2024-05-18T08:19:43.166Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://nginx.org/&quot;&gt;官网&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;安装步骤&quot;&gt;&lt;a href=&quot;#安装步骤&quot; class=&quot;headerlink&quot; title=&quot;安装步骤&quot;&gt;&lt;/a&gt;安装步骤&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;nginx安装跟系统版本有关&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的系统是ubuntu 16.04 LTS&lt;br&gt;1、修改&amp;#x2F;etc&amp;#x2F;apt&amp;#x2F;sources.list&lt;br&gt;文件末尾添加：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;deb http://nginx.org/packages/ubuntu/ xenial nginx&lt;/span&gt;&lt;br&gt;&lt;spa</summary>
      
    
    
    
    
    <category term="nginx" scheme="https://carl-zk.github.io/blog/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>装扮博客</title>
    <link href="https://carl-zk.github.io/blog/2017/08/19/%E8%A3%85%E6%89%AE%E5%8D%9A%E5%AE%A2/"/>
    <id>https://carl-zk.github.io/blog/2017/08/19/%E8%A3%85%E6%89%AE%E5%8D%9A%E5%AE%A2/</id>
    <published>2017-08-19T14:25:50.000Z</published>
    <updated>2024-05-18T08:19:43.210Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.w3schools.com/colors/colors_picker.asp&quot;&gt;color picker 取色&lt;/a&gt;&lt;br&gt;看到别人博客闪闪的，禁不住也想秀一个。好感慨前端技术发展的速度，奈何自己后端不咋样，前端也是个白痴，唉。&lt;/p&gt;
&lt;h2 id=&quot;particles-js&quot;&gt;&lt;a href=&quot;#particles-js&quot; class=&quot;headerlink&quot; title=&quot;particles.js&quot;&gt;&lt;/a&gt;particles.js&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/VincentGarreau/particles.js/&quot;&gt;particles.js github主页&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/csdn_yudong/article/details/53128570&quot;&gt;使用教程&lt;/a&gt;&lt;/p&gt;
&lt;p data-height=&quot;265&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;pnlso&quot; data-default-tab</summary>
      
    
    
    
    <category term="系统配置" scheme="https://carl-zk.github.io/blog/categories/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>小小爬虫</title>
    <link href="https://carl-zk.github.io/blog/2017/08/19/%E5%B0%8F%E5%B0%8F%E7%88%AC%E8%99%AB/"/>
    <id>https://carl-zk.github.io/blog/2017/08/19/%E5%B0%8F%E5%B0%8F%E7%88%AC%E8%99%AB/</id>
    <published>2017-08-19T07:19:54.000Z</published>
    <updated>2024-05-18T08:19:43.200Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;为了每天看到《权利的游戏》的更新，我决定写个爬虫，用crontab定时任务每天给我发个邮件。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span</summary>
      
    
    
    
    
    <category term="python" scheme="https://carl-zk.github.io/blog/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>关于一个单例的困惑</title>
    <link href="https://carl-zk.github.io/blog/2017/08/19/%E5%85%B3%E4%BA%8E%E4%B8%80%E4%B8%AA%E5%8D%95%E4%BE%8B%E7%9A%84%E5%9B%B0%E6%83%91/"/>
    <id>https://carl-zk.github.io/blog/2017/08/19/%E5%85%B3%E4%BA%8E%E4%B8%80%E4%B8%AA%E5%8D%95%E4%BE%8B%E7%9A%84%E5%9B%B0%E6%83%91/</id>
    <published>2017-08-19T06:55:32.000Z</published>
    <updated>2024-05-18T08:19:43.194Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;一个说法不去验证就欣然接受，然后再把它传播给别人，荒谬又可悲！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/sp</summary>
      
    
    
    
    <category term="java" scheme="https://carl-zk.github.io/blog/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>一站式配置Ubuntu</title>
    <link href="https://carl-zk.github.io/blog/2017/08/17/%E4%B8%80%E7%AB%99%E5%BC%8F%E9%85%8D%E7%BD%AEubuntu/"/>
    <id>https://carl-zk.github.io/blog/2017/08/17/%E4%B8%80%E7%AB%99%E5%BC%8F%E9%85%8D%E7%BD%AEubuntu/</id>
    <published>2017-08-17T13:45:45.000Z</published>
    <updated>2024-05-18T08:19:43.183Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;这个是方便我每次重装系统避免再到处翻该下载的东西，所以中间细节不会太多。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在准备重装linux系统之前，先把&lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot;&gt;VirtualBox&lt;/a&gt;、win7镜像、&lt;a href=&quot;http://xl9.xunlei.com/&quot;&gt;迅雷&lt;/a&gt;、&lt;a href=&quot;https://www.google.com/chrome/browser/desktop/index.html&quot;&gt;chrome&lt;/a&gt;、&lt;a href=&quot;https://github.com/XX-net/XX-Net&quot;&gt;XX-net&lt;/a&gt;、&lt;a href=&quot;https://nodejs.org/en/download/&quot;&gt;nodejs&lt;/a&gt;、&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot;&gt;jdk&lt;/a&gt;、&lt;a href=</summary>
      
    
    
    
    <category term="系统配置" scheme="https://carl-zk.github.io/blog/categories/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>同学，你知道这俩String相等吗？</title>
    <link href="https://carl-zk.github.io/blog/2017/06/23/%E5%90%8C%E5%AD%A6%EF%BC%8C%E4%BD%A0%E7%9F%A5%E9%81%93%E8%BF%99%E4%BF%A9string%E7%9B%B8%E7%AD%89%E5%90%97%EF%BC%9F/"/>
    <id>https://carl-zk.github.io/blog/2017/06/23/%E5%90%8C%E5%AD%A6%EF%BC%8C%E4%BD%A0%E7%9F%A5%E9%81%93%E8%BF%99%E4%BF%A9string%E7%9B%B8%E7%AD%89%E5%90%97%EF%BC%9F/</id>
    <published>2017-06-23T12:08:00.000Z</published>
    <updated>2024-05-18T08:19:43.196Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;你肯定有这样的经历，&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>PL/SQL 学习</title>
    <link href="https://carl-zk.github.io/blog/2017/06/21/PL-SQL-%E5%AD%A6%E4%B9%A0/"/>
    <id>https://carl-zk.github.io/blog/2017/06/21/PL-SQL-%E5%AD%A6%E4%B9%A0/</id>
    <published>2017-06-21T15:41:31.000Z</published>
    <updated>2024-05-18T08:19:43.159Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://carl-zk.github.io/blog/2017/06/17/Oracle-Install/&quot;&gt;Oracle Install&lt;/a&gt;看起来实在有点长。&lt;/p&gt;
&lt;h4 id=&quot;PL-x2F-SQL函数编写&quot;&gt;&lt;a href=&quot;#PL-x2F-SQL函数编写&quot; class=&quot;headerlink&quot; title=&quot;PL&amp;#x2F;SQL函数编写&quot;&gt;&lt;/a&gt;PL&amp;#x2F;SQL函数编写&lt;/h4&gt;&lt;p&gt;特性：函数被调用一次之后就会被缓存在服务器！&lt;br&gt;查看有哪些函数    USER_PROCEDURES&lt;br&gt;&lt;code&gt;SELECT * FROM USER_PROCEDURES;&lt;/code&gt;&lt;br&gt;&lt;code&gt;SELECT OBJECT_NAME, OBJECT_ID, OBJECT_TYPE FROM USER_PROCEDURES ORDER BY OBJECT_TYPE;&lt;/code&gt;&lt;br&gt;查看具体函数source     USER_SOURCE&lt;br&gt;&amp;#96;&amp;#96;&lt;br&gt;&lt;code&gt;SELECT NAME, LINE, TE</summary>
      
    
    
    
    
    <category term="oracle" scheme="https://carl-zk.github.io/blog/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>查看堆外内存</title>
    <link href="https://carl-zk.github.io/blog/2017/06/18/%E6%9F%A5%E7%9C%8B%E5%A0%86%E5%A4%96%E5%86%85%E5%AD%98/"/>
    <id>https://carl-zk.github.io/blog/2017/06/18/%E6%9F%A5%E7%9C%8B%E5%A0%86%E5%A4%96%E5%86%85%E5%AD%98/</id>
    <published>2017-06-18T07:40:22.000Z</published>
    <updated>2024-05-18T08:19:43.203Z</updated>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;tools&quot;&gt;&lt;a href=&quot;#tools&quot; class=&quot;headerlink&quot; title=&quot;tools&quot;&gt;&lt;/a&gt;tools&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gperftools/gperftools&quot;&gt;gperftools&lt;/a&gt;&lt;br&gt;gperftools将C++中的malloc替换成tcmalloc，然后就可以监控C++内存。&lt;br&gt;所以，在64位linux系统中，建议安装&lt;a href=&quot;http://download.savannah.gnu.org/releases/libunwind/libunwind-0.99-beta.tar.gz&quot;&gt;libunwind-0.99-beta&lt;/a&gt;这个版本，因为它会调用malloc，版本太低或过高会引发内存泄露。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;install libunwind-0.99-beta&lt;/strong&gt;&lt;br&gt;cd libunwind-0.99-beta&lt;br&gt;.&amp;#x2F;configure&lt;br&gt;make&lt;br&gt;如果报错error:</summary>
      
    
    
    
    <category term="java" scheme="https://carl-zk.github.io/blog/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>Oracle Install</title>
    <link href="https://carl-zk.github.io/blog/2017/06/17/Oracle-Install/"/>
    <id>https://carl-zk.github.io/blog/2017/06/17/Oracle-Install/</id>
    <published>2017-06-17T13:45:54.000Z</published>
    <updated>2024-05-18T08:19:43.158Z</updated>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;system-info&quot;&gt;&lt;a href=&quot;#system-info&quot; class=&quot;headerlink&quot; title=&quot;system info&quot;&gt;&lt;/a&gt;system info&lt;/h4&gt;&lt;p&gt;windonws 10&lt;br&gt;计算机名: DESKTOP-CT4OEIK&lt;/p&gt;
&lt;p&gt;Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production&lt;br&gt;PL&amp;#x2F;SQL Release 11.2.0.1.0 - Production&lt;br&gt;CORE    11.2.0.1.0      Production&lt;br&gt;TNS for 64-bit Windows: Version 11.2.0.1.0 - Production&lt;br&gt;NLSRTL Version 11.2.0.1.0 - Production&lt;/p&gt;
&lt;h4 id=&quot;install-info&quot;&gt;&lt;a href=&quot;#install-info&quot; class=&quot;headerlink&quot; title=&quot;install inf</summary>
      
    
    
    
    
    <category term="oracle" scheme="https://carl-zk.github.io/blog/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>SQL中的锁</title>
    <link href="https://carl-zk.github.io/blog/2017/05/20/SQL%E4%B8%AD%E7%9A%84%E9%94%81/"/>
    <id>https://carl-zk.github.io/blog/2017/05/20/SQL%E4%B8%AD%E7%9A%84%E9%94%81/</id>
    <published>2017-05-20T13:44:49.000Z</published>
    <updated>2024-05-18T08:19:43.160Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;Connnection设置autoCommit&amp;#x3D;false时，sql执行更新之后还未commit，其它更新这条数据的sql会等待还是顺利执行完成？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;测试环境&lt;/strong&gt;&lt;br&gt;mysql  Ver 14.14 Distrib 5.5.55, for debian-linux-gnu (x86_64) using readline 6.3&lt;br&gt;Linux itmebrnb 3.16.0-4-amd64 #1 SMP Debian 3.16.43-2 (2017-04-30) x86_64 GNU&amp;#x2F;Linux&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/carl-zk/JavaJava/tree/master/SqlRowLock&quot;&gt;测试代码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;测试方法&quot;&gt;&lt;a href=&quot;#测试方法&quot; class=&quot;headerlink&quot; title=&quot;测试方法&quot;&gt;&lt;/a&gt;测试方法&lt;/h4&gt;&lt;p&gt;在IDEA中debug模式下运行TestA，断点设在MySqlUserRepository</summary>
      
    
    
    
    
    <category term="sql" scheme="https://carl-zk.github.io/blog/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>NO_PUBKEY</title>
    <link href="https://carl-zk.github.io/blog/2017/05/17/NO-PUBKEY/"/>
    <id>https://carl-zk.github.io/blog/2017/05/17/NO-PUBKEY/</id>
    <published>2017-05-17T12:12:21.000Z</published>
    <updated>2024-05-18T08:19:43.157Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://mirrors.aliyun.com/help/debian&quot;&gt;阿里云镜像&lt;/a&gt;&lt;br&gt;原则上debian的sources和ubuntu的不能混着用。&lt;/p&gt;
&lt;p&gt;debian8 改了sources.list之后报这个错&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Reading package lists... Done&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="系统配置" scheme="https://carl-zk.github.io/blog/categories/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>Bash Script学习</title>
    <link href="https://carl-zk.github.io/blog/2017/05/09/Bash-Script%E5%AD%A6%E4%B9%A0/"/>
    <id>https://carl-zk.github.io/blog/2017/05/09/Bash-Script%E5%AD%A6%E4%B9%A0/</id>
    <published>2017-05-09T14:58:50.000Z</published>
    <updated>2024-05-19T13:25:57.185Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;不看&lt;a href=&quot;http://linuxcommand.org/index.php&quot;&gt;TLCL&lt;/a&gt;,学会shell script也惘然！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h2&gt;&lt;h3 id=&quot;windows格式文件转linux格式文件&quot;&gt;&lt;a href=&quot;#windows格式文件转linux格式文件&quot; class=&quot;headerlink&quot; title=&quot;windows格式文件转linux格式文件&quot;&gt;&lt;/a&gt;windows格式文件转linux格式文件&lt;/h3&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sed -i &lt;span class=&quot;string&quot;</summary>
      
    
    
    
    
    <category term="shell" scheme="https://carl-zk.github.io/blog/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Linux配置jdk</title>
    <link href="https://carl-zk.github.io/blog/2017/05/06/linux%E9%85%8D%E7%BD%AEjdk/"/>
    <id>https://carl-zk.github.io/blog/2017/05/06/linux%E9%85%8D%E7%BD%AEjdk/</id>
    <published>2017-05-06T13:58:38.000Z</published>
    <updated>2024-05-18T08:19:43.165Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;已经有一种习惯，每次配置jdk都会翻自己以前的博客，因为每次只要一百度，肯定会出来很多乱七八糟的东西，而且google出来的也不准确。互联网就是因为坏的东西太多，一一甄别太耗时，还是自己备份的最靠谱。&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# java jdk 1u8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export JAVA_HOME=/usr/lib/jdk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export JRE_</summary>
      
    
    
    
    <category term="系统配置" scheme="https://carl-zk.github.io/blog/categories/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>Debian</title>
    <link href="https://carl-zk.github.io/blog/2017/05/06/debian/"/>
    <id>https://carl-zk.github.io/blog/2017/05/06/debian/</id>
    <published>2017-05-06T10:16:09.000Z</published>
    <updated>2024-05-18T08:19:43.163Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;最近看了篇关于吐槽ubuntu放弃unity转用gnome的文章，作者是deepin桌面系统的开发者。忍不住就去deepin的官网下了下装在虚机里试了试，结果样式全都是模仿的mac的。&lt;br&gt;作为一个linux桌面开发者，他的情怀我可以理解，不过我没打算用deepin系统，虽然样子很酷，毕竟太像mac的linux让我感觉不舒服。另外还有个顾虑，不方便说。&lt;br&gt;我想，既然mac的小托盘这么好，不如也在我debian8里面装一个。果然评论里有人说装个dash-to-doc和topicons就跟mac差不多了。还等啥，google一下装起来。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.检查gnome-shell版本&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ gnome-shell --version&lt;</summary>
      
    
    
    
    <category term="系统配置" scheme="https://carl-zk.github.io/blog/categories/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>发现一本好书</title>
    <link href="https://carl-zk.github.io/blog/2017/04/17/%E5%8F%91%E7%8E%B0%E4%B8%80%E6%9C%AC%E5%A5%BD%E4%B9%A6/"/>
    <id>https://carl-zk.github.io/blog/2017/04/17/%E5%8F%91%E7%8E%B0%E4%B8%80%E6%9C%AC%E5%A5%BD%E4%B9%A6/</id>
    <published>2017-04-17T14:47:27.000Z</published>
    <updated>2024-05-18T08:19:43.196Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;这里主要记录一些意外发现的好东西,比如博客书籍.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;The-Linux-Command-Line&quot;&gt;&lt;a href=&quot;#The-Linux-Command-Line&quot; class=&quot;headerlink&quot; title=&quot;The Linux Command Line&quot;&gt;&lt;/a&gt;The Linux Command Line&lt;/h4&gt;&lt;p&gt;快乐Linux命令行&lt;br&gt;&lt;a href=&quot;https://billie66.github.io/TLCL/&quot;&gt;https://billie66.github.io/TLCL/&lt;/a&gt;&lt;br&gt;去下pdf,成为linux大神&lt;a href=&quot;http://linuxcommand.org/&quot;&gt;官网&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;-1&quot;&gt;&lt;a href=&quot;#-1&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;-2&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Log4j2手册</title>
    <link href="https://carl-zk.github.io/blog/2017/03/28/log4j%E6%89%8B%E5%86%8C/"/>
    <id>https://carl-zk.github.io/blog/2017/03/28/log4j%E6%89%8B%E5%86%8C/</id>
    <published>2017-03-28T14:24:55.000Z</published>
    <updated>2024-05-18T08:19:43.165Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;** 参考文献 **&lt;br&gt;&lt;a href=&quot;https://logging.apache.org/log4j/2.x/&quot;&gt;官网&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://dreamoftch.iteye.com/blog/1899948&quot;&gt;http://dreamoftch.iteye.com/blog/1899948&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.codeceo.com/article/log4j-usage.html&quot;&gt;最详细的Log4J使用教程&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;log4j2比log4j1.x&lt;a href=&quot;https://logging.apache.org/log4j/2.x/manual/async.html#Performance&quot;&gt;有显著的性能提高&lt;/a&gt;，并且增加了许多特性。所以最好使用log4j2。&lt;br&gt;推荐使用xml文件配置，可以配置一些像properties文件无法配置的功能。&lt;br&gt;&lt;a href=&quot;https://www.slf4j.org/&quot;&gt;slf4&lt;/a&gt;The Simple Log</summary>
      
    
    
    
    
    <category term="log4j2" scheme="https://carl-zk.github.io/blog/tags/log4j2/"/>
    
  </entry>
  
  <entry>
    <title>Class加载原理</title>
    <link href="https://carl-zk.github.io/blog/2017/03/27/Class%E5%8A%A0%E8%BD%BD%E5%8E%9F%E7%90%86/"/>
    <id>https://carl-zk.github.io/blog/2017/03/27/Class%E5%8A%A0%E8%BD%BD%E5%8E%9F%E7%90%86/</id>
    <published>2017-03-27T13:49:11.000Z</published>
    <updated>2024-05-18T08:19:43.148Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;今天想利用类加载机制写一个单例类,结果发现自己不会写了,内部类没有写成static,搞不懂为什么在外部类中不能new这个内部类——当然不能,因为外部类的这个方法是static的,而这个内部类不是static,不要以为这样就结束了,原理你清楚吗?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考文献&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;http://www.onjava.com/pub/a/onjava/2005/01/26/classloading.html&quot;&gt;Internals of Java Class Loading&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.ibm.com/developerworks/cn/java/j-lo-classloader/#toggle&quot;&gt;深入探讨Java类加载器&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Class和Data&quot;&gt;&lt;a href=&quot;#Class和Data&quot; class=&quot;headerlink&quot; title=&quot;Class和Data&quot;&gt;&lt;/a&gt;Class和Data&lt;/h2&gt;&lt;p&gt;class代表一段可执行的代码(code),data代表</summary>
      
    
    
    
    <category term="java" scheme="https://carl-zk.github.io/blog/categories/java/"/>
    
    
    <category term="reflect" scheme="https://carl-zk.github.io/blog/tags/reflect/"/>
    
  </entry>
  
  <entry>
    <title>好玩的@Annotation标签</title>
    <link href="https://carl-zk.github.io/blog/2017/03/27/%E5%A5%BD%E7%8E%A9%E7%9A%84-annotation%E6%A0%87%E7%AD%BE/"/>
    <id>https://carl-zk.github.io/blog/2017/03/27/%E5%A5%BD%E7%8E%A9%E7%9A%84-annotation%E6%A0%87%E7%AD%BE/</id>
    <published>2017-03-26T16:33:39.000Z</published>
    <updated>2024-05-18T08:19:43.197Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;参考&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;http://www.mkyong.com/java/java-custom-annotations-example/&quot;&gt;Java Custom Annotations Example&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;一个Annotation小例子&quot;&gt;&lt;a href=&quot;#一个Annotation小例子&quot; class=&quot;headerlink&quot; title=&quot;一个Annotation小例子&quot;&gt;&lt;/a&gt;一个Annotation小例子&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/sp</summary>
      
    
    
    
    <category term="java" scheme="https://carl-zk.github.io/blog/categories/java/"/>
    
    
    <category term="reflect" scheme="https://carl-zk.github.io/blog/tags/reflect/"/>
    
  </entry>
  
  <entry>
    <title>排序算法</title>
    <link href="https://carl-zk.github.io/blog/2017/03/26/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>https://carl-zk.github.io/blog/2017/03/26/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2017-03-26T02:35:31.000Z</published>
    <updated>2024-05-18T08:19:43.202Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/carl-zk/JavaJava/tree/master/IntroductionToAlgorithms/src&quot;&gt;源码地址&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1</summary>
      
    
    
    
    <category term="数据结构" scheme="https://carl-zk.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>第7章 Java中的13个原子操作类</title>
    <link href="https://carl-zk.github.io/blog/2017/03/23/%E7%AC%AC7%E7%AB%A0-java%E4%B8%AD%E7%9A%8413%E4%B8%AA%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E7%B1%BB/"/>
    <id>https://carl-zk.github.io/blog/2017/03/23/%E7%AC%AC7%E7%AB%A0-java%E4%B8%AD%E7%9A%8413%E4%B8%AA%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E7%B1%BB/</id>
    <published>2017-03-23T13:26:40.000Z</published>
    <updated>2024-05-18T08:19:43.205Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://ifeve.com/sun-misc-unsafe/#header&quot;&gt;见识见识Unsafe&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;</summary>
      
    
    
    
    <category term="并发编程的艺术" scheme="https://carl-zk.github.io/blog/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF/"/>
    
    
    <category term="reflect" scheme="https://carl-zk.github.io/blog/tags/reflect/"/>
    
  </entry>
  
  <entry>
    <title>第6章 Java并发容器和框架</title>
    <link href="https://carl-zk.github.io/blog/2017/03/21/java%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8%E5%92%8C%E6%A1%86%E6%9E%B6/"/>
    <id>https://carl-zk.github.io/blog/2017/03/21/java%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8%E5%92%8C%E6%A1%86%E6%9E%B6/</id>
    <published>2017-03-21T13:37:22.000Z</published>
    <updated>2024-05-18T08:19:43.165Z</updated>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ConcurrentHashMap的实现原理与使用&quot;&gt;&lt;a href=&quot;#ConcurrentHashMap的实现原理与使用&quot; class=&quot;headerlink&quot; title=&quot;ConcurrentHashMap的实现原理与使用&quot;&gt;&lt;/a&gt;ConcurrentHashMap的实现原理与使用&lt;/h1&gt;&lt;h1 id=&quot;ConcurrentLinkedQueue&quot;&gt;&lt;a href=&quot;#ConcurrentLinkedQueue&quot; class=&quot;headerlink&quot; title=&quot;ConcurrentLinkedQueue&quot;&gt;&lt;/a&gt;ConcurrentLinkedQueue&lt;/h1&gt;</summary>
      
    
    
    
    <category term="并发编程的艺术" scheme="https://carl-zk.github.io/blog/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>第5章 Java中的锁</title>
    <link href="https://carl-zk.github.io/blog/2017/03/19/%E7%AC%AC5%E7%AB%A0-java%E4%B8%AD%E7%9A%84%E9%94%81/"/>
    <id>https://carl-zk.github.io/blog/2017/03/19/%E7%AC%AC5%E7%AB%A0-java%E4%B8%AD%E7%9A%84%E9%94%81/</id>
    <published>2017-03-19T03:02:43.000Z</published>
    <updated>2024-05-18T08:19:43.205Z</updated>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Lock接口&quot;&gt;&lt;a href=&quot;#Lock接口&quot; class=&quot;headerlink&quot; title=&quot;Lock接口&quot;&gt;&lt;/a&gt;Lock接口&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Lock&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;ope</summary>
      
    
    
    
    <category term="并发编程的艺术" scheme="https://carl-zk.github.io/blog/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>第4章 Java并发编程基础</title>
    <link href="https://carl-zk.github.io/blog/2017/03/14/%E7%AC%AC4%E7%AB%A0-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    <id>https://carl-zk.github.io/blog/2017/03/14/%E7%AC%AC4%E7%AB%A0-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</id>
    <published>2017-03-14T13:42:18.000Z</published>
    <updated>2024-05-18T08:19:43.205Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;查看JVM线程信息&quot;&gt;&lt;a href=&quot;#查看JVM线程信息&quot; class=&quot;headerlink&quot; title=&quot;查看JVM线程信息&quot;&gt;&lt;/a&gt;查看JVM线程信息&lt;/h2&gt;&lt;p&gt;居然还有这么好的东西&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; chapter04;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.lang.management.ManagementFactory;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.lang.management.ThreadInfo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.lang.management.ThreadMXBean;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * Created by hero on 17-3-14.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;MultiThread&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        MultiThread.showThreadsInfo(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;showThreadsInfo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;boolean&lt;/span&gt; lockedMonitors, &lt;span class=&quot;type&quot;&gt;boolean&lt;/span&gt; lockedSynchronizers)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;ThreadMXBean&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;threadMXBean&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; ManagementFactory.getThreadMXBean();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ThreadInfo[] threadInfos = threadMXBean.dumpAllThreads(lockedMonitors, lockedSynchronizers);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (ThreadInfo threadInfo : threadInfos) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;[&amp;quot;&lt;/span&gt; + threadInfo.getThreadId() + &lt;span class=&quot;string&quot;&gt;&amp;quot;] &amp;quot;&lt;/span&gt; + threadInfo.getThreadName());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;线程优先级靠谱吗&quot;&gt;&lt;a href=&quot;#线程优先级靠谱吗&quot; class=&quot;headerlink&quot; title=&quot;线程优先级靠谱吗&quot;&gt;&lt;/a&gt;线程优先级靠谱吗&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; chapter04;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.concurrent.CyclicBarrier;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.concurrent.TimeUnit;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * Created by hero on 17-3-14.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;ThreadPriority&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;_SIZE&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;boolean&lt;/span&gt; isEnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; CyclicBarrier cyclicBarrier;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;ThreadPriority&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cyclicBarrier = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;CyclicBarrier&lt;/span&gt;(_SIZE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        isEnd = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;ThreadPriority&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;threadPriority&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;ThreadPriority&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        threadPriority.run();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Job[] jobs = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Job&lt;/span&gt;[_SIZE];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; _SIZE; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;priority&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; i &amp;lt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; ? Thread.MIN_PRIORITY : Thread.MAX_PRIORITY;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            jobs[i] = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Job&lt;/span&gt;(priority);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Thread&lt;/span&gt;(jobs[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            thread.setPriority(priority);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            thread.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            TimeUnit.SECONDS.sleep(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        isEnd = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Job job : jobs) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.printf(&lt;span class=&quot;string&quot;&gt;&amp;quot;%5d %15d&#92;n&amp;quot;&lt;/span&gt;, job.priority, job.count);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Job&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Runnable&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; priority;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; count;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;Job&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; priority)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.priority = priority;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.count = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                cyclicBarrier.await();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (!isEnd) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.count++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    Thread.&lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;很显然，你需要运行一下上面的代码。&lt;/p&gt;
&lt;h2 id=&quot;线程的状态&quot;&gt;&lt;a href=&quot;#线程的状态&quot; class=&quot;headerlink&quot; title=&quot;线程的状态&quot;&gt;&lt;/a&gt;线程的状态&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;state&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;NEW&lt;/td&gt;
&lt;td&gt;初始状态，线程被构建，但还没调start()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RUNNABLE&lt;/td&gt;
&lt;td&gt;运行状态，Java将操作系统中的就绪和运行中两种状态笼统称为“RUNNABLE”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BLOCKED&lt;/td&gt;
&lt;td&gt;阻塞状态，表示线程阻塞于锁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WAITING&lt;/td&gt;
&lt;td&gt;等待状态，需要等待其它线程做出一些特定操作（通知或中断）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TIME_WAITING&lt;/td&gt;
&lt;td&gt;超时等待，不同于WAITING，它可以在指定时间后自行返回&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TERMINATED&lt;/td&gt;
&lt;td&gt;终止状态，线程执行完毕&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="并发编程的艺术" scheme="https://carl-zk.github.io/blog/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>ReentrantLock</title>
    <link href="https://carl-zk.github.io/blog/2017/03/12/ReentrantLock/"/>
    <id>https://carl-zk.github.io/blog/2017/03/12/ReentrantLock/</id>
    <published>2017-03-12T07:15:07.000Z</published>
    <updated>2024-05-18T08:19:43.160Z</updated>
    
    
    <summary type="html">&lt;p&gt;ReentrantLock UML图：&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="https://carl-zk.github.io/blog/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>第三章 Java内存模型</title>
    <link href="https://carl-zk.github.io/blog/2017/03/11/%E7%AC%AC%E4%B8%89%E7%AB%A0-Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <id>https://carl-zk.github.io/blog/2017/03/11/%E7%AC%AC%E4%B8%89%E7%AB%A0-Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</id>
    <published>2017-03-11T15:28:38.000Z</published>
    <updated>2024-05-18T08:19:43.206Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Java内存模型的基础&quot;&gt;&lt;a href=&quot;#Java内存模型的基础&quot; class=&quot;headerlink&quot; title=&quot;Java内存模型的基础&quot;&gt;&lt;/a&gt;Java内存模型的基础&lt;/h1&gt;&lt;h2 id=&quot;并发编程模型的两个关键问题：&quot;&gt;&lt;a href=&quot;#并发编程模型的两个关键问题：&quot; class=&quot;headerlink&quot; title=&quot;并发编程模型的两个关键问题：&quot;&gt;&lt;/a&gt;并发编程模型的两个关键问题：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;线程之间如何通信。&lt;/li&gt;
&lt;li&gt;线程之间如何同步。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;命令式编程中线程通信机制：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;并发模型&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;程序的公共状态&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;通信方式&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;共享内存&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;共享&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;隐式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;消息传递&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;无&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;显示&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;同步是指程序中用于控制不同线程间操作发生相对顺序的机制。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;并发模型&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;状态&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;方式&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;共享内存&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;显式&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;显式指定某个方法或某段代码需要在线程之间互斥执行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;消息传递&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;隐式&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;消息的发送必须在接收之前的属性决定的&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;java的并发采用的是共享内存模型，线程之间的通信是隐式的，整个通信过程对程序员完全透明。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Java内存模型的抽象结构&quot;&gt;&lt;a href=&quot;#Java内存模型的抽象结构&quot; class=&quot;headerlink&quot; title=&quot;Java内存模型的抽象结构&quot;&gt;&lt;/a&gt;Java内存模型的抽象结构&lt;/h2&gt;&lt;p&gt;在Java中，所有实例域、静态域和数组元素都存储在堆内存中，线程间共享，称为“共享变量”。&lt;br&gt;局部变量(Local Variables)、方法定义参数(Formal Method Parameters)和异常处理器参数(Exception Handler Parameters)不会在线程间共享，它们不会有内存可见性问题，也不受JMM影响。&lt;/p&gt;</summary>
    
    
    
    <category term="并发编程的艺术" scheme="https://carl-zk.github.io/blog/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>第二章 Java并发机制的底层实现原理</title>
    <link href="https://carl-zk.github.io/blog/2017/03/11/%E7%AC%AC%E4%BA%8C%E7%AB%A0-Java%E5%B9%B6%E5%8F%91%E6%9C%BA%E5%88%B6%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>https://carl-zk.github.io/blog/2017/03/11/%E7%AC%AC%E4%BA%8C%E7%AB%A0-Java%E5%B9%B6%E5%8F%91%E6%9C%BA%E5%88%B6%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</id>
    <published>2017-03-11T13:35:52.000Z</published>
    <updated>2024-05-18T08:19:43.206Z</updated>
    
    
    <summary type="html">&lt;p&gt;从下图中可以看出，Java中所使用的并发机制依赖于&lt;strong&gt;JVM的实现&lt;/strong&gt;和&lt;strong&gt;CPU的指令&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="并发编程的艺术" scheme="https://carl-zk.github.io/blog/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>第一章 并发编程的挑战</title>
    <link href="https://carl-zk.github.io/blog/2017/03/09/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E6%8C%91%E6%88%98/"/>
    <id>https://carl-zk.github.io/blog/2017/03/09/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E6%8C%91%E6%88%98/</id>
    <published>2017-03-09T14:53:21.000Z</published>
    <updated>2024-05-18T08:19:43.206Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;并发会有上下文切换，所以一定规模下不一定比串行快，来看一个比较：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;</summary>
      
    
    
    
    <category term="并发编程的艺术" scheme="https://carl-zk.github.io/blog/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Synchronized vs ReentrantLock</title>
    <link href="https://carl-zk.github.io/blog/2017/03/08/synchronized-vs-ReentrantLock/"/>
    <id>https://carl-zk.github.io/blog/2017/03/08/synchronized-vs-ReentrantLock/</id>
    <published>2017-03-08T14:37:02.000Z</published>
    <updated>2024-05-18T08:19:43.167Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;最近看到项目代码中有很多地方用到了&lt;code&gt;synchronized&lt;/code&gt;，纠结它与&lt;code&gt;ReentrantLock&lt;/code&gt;在性能上孰优孰劣。正好也把&lt;code&gt;ReadWriteLock&lt;/code&gt;、&lt;code&gt;ReentrantReadWriteLock&lt;/code&gt;、&lt;code&gt;StampedLock&lt;/code&gt;也研究一下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考：&lt;br&gt;&lt;a href=&quot;https://javarevisited.blogspot.com/2013/03/reentrantlock-example-in-java-synchronized-difference-vs-lock.html&quot;&gt;difference between synchronized vs ReentrantLock&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;看了一个接一个的资料，觉得自己对Java一无所知，曾经看过的都忘记了。这就是只会用的硬伤，先看完薄的Java并发再看深入jvm，回头来解决这个博客，估计是要看源码的了，自己写代码比较一下。&lt;b</summary>
      
    
    
    
    <category term="java" scheme="https://carl-zk.github.io/blog/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>Gradle</title>
    <link href="https://carl-zk.github.io/blog/2017/03/06/gradle/"/>
    <id>https://carl-zk.github.io/blog/2017/03/06/gradle/</id>
    <published>2017-03-06T13:13:10.000Z</published>
    <updated>2024-05-18T08:19:43.164Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.gradle.org/current/userguide/tutorial_gradle_command_line.html&quot;&gt;gradle&lt;/a&gt;与maven功能相同，区别在于gradle是一个基于编程语言的build框架，maven是xml配置文件。孰好孰坏看你的喜好，编程的当然可以分模块，往上面抽象；xml呢最广泛有很多工具可以配合，而且maven文档写的很好好赞，xml的配置也不错。个人感觉在有IDEA的情况下选择maven；gradle我会在写个人的小程序时使用，牛人和实力雄厚的公司或许会选择gradle，自己去Google一下优劣即可。在学习之前先略一略Groovy哦。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;首先，学习一下gradle的几个命令。&quot;&gt;&lt;a href=&quot;#首先，学习一下gradle的几个命令。&quot; class=&quot;headerlink&quot; title=&quot;首先，学习一下gradle的几个命令。&quot;&gt;&lt;/a&gt;首先，学习一下gradle的几个命令。&lt;/h1&gt;&lt;p&gt;&lt;code&gt;gradl</summary>
      
    
    
    
    <category term="OFBiz" scheme="https://carl-zk.github.io/blog/categories/OFBiz/"/>
    
    
  </entry>
  
  <entry>
    <title>Install OFBiz</title>
    <link href="https://carl-zk.github.io/blog/2017/03/05/Install-OFBize/"/>
    <id>https://carl-zk.github.io/blog/2017/03/05/Install-OFBize/</id>
    <published>2017-03-05T05:11:57.000Z</published>
    <updated>2024-05-18T08:19:43.150Z</updated>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;download&quot;&gt;&lt;a href=&quot;#download&quot; class=&quot;headerlink&quot; title=&quot;download&quot;&gt;&lt;/a&gt;download&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://ofbiz.apache.org/download.html&quot;&gt;download&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;install-gradle&quot;&gt;&lt;a href=&quot;#install-gradle&quot; class=&quot;headerlink&quot; title=&quot;install gradle&quot;&gt;&lt;/a&gt;install gradle&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://docs.gradle.org/3.4.1/userguide/overview.html&quot;&gt;gradle&lt;/a&gt;是一个build,automate and deliver工具，类似ant，不过&lt;a href=&quot;http://localhost:4000/blog/2017/03/06/gradle/&quot;&gt;gradle学习&lt;/a&gt;主要针对Java项目。build scripts是采用&lt;a href=&quot;http</summary>
      
    
    
    
    <category term="OFBiz" scheme="https://carl-zk.github.io/blog/categories/OFBiz/"/>
    
    
  </entry>
  
  <entry>
    <title>OFBiz Learn</title>
    <link href="https://carl-zk.github.io/blog/2017/03/04/OFBiz-Learn/"/>
    <id>https://carl-zk.github.io/blog/2017/03/04/OFBiz-Learn/</id>
    <published>2017-03-04T05:42:07.000Z</published>
    <updated>2024-05-18T08:19:43.157Z</updated>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;初识OFBiz&quot;&gt;&lt;a href=&quot;#初识OFBiz&quot; class=&quot;headerlink&quot; title=&quot;初识OFBiz&quot;&gt;&lt;/a&gt;初识OFBiz&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://ofbiz.apache.org/apache-ofbiz-project-overview.html&quot;&gt;官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Open For Business(OFBiz) 是一个企业应用框架，类似于Spring，主要针对ERP、CRM系统。&lt;br&gt;OFBiz使用 &lt;a href=&quot;https://www.apache.org/licenses/LICENSE-2.0&quot;&gt;Apache License Version 2.0协议&lt;/a&gt;，你可以不公开你的代码。&lt;/p&gt;
&lt;h1 id=&quot;Major-Application-Components&quot;&gt;&lt;a href=&quot;#Major-Application-Components&quot; class=&quot;headerlink&quot; title=&quot;Major Application Components&quot;&gt;&lt;/a&gt;Major Applicat</summary>
      
    
    
    
    <category term="OFBiz" scheme="https://carl-zk.github.io/blog/categories/OFBiz/"/>
    
    
  </entry>
  
  <entry>
    <title>Sublime快捷键</title>
    <link href="https://carl-zk.github.io/blog/2017/03/03/sublime%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://carl-zk.github.io/blog/2017/03/03/sublime%E5%BF%AB%E6%8D%B7%E9%94%AE/</id>
    <published>2017-03-03T14:19:53.000Z</published>
    <updated>2024-05-18T08:19:43.167Z</updated>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;ctr-p&quot;&gt;&lt;a href=&quot;#ctr-p&quot; class=&quot;headerlink&quot; title=&quot;ctr+p&quot;&gt;&lt;/a&gt;ctr+p&lt;/h4&gt;&lt;p&gt;可以去任何地方&lt;/p&gt;
&lt;h4 id=&quot;ctr-shift-p&quot;&gt;&lt;a href=&quot;#ctr-shift-p&quot; class=&quot;headerlink&quot; title=&quot;ctr+shift+p&quot;&gt;&lt;/a&gt;ctr+shift+p&lt;/h4&gt;&lt;p&gt;命令模式&lt;br&gt;设置文档语法&lt;/p&gt;
&lt;h4 id=&quot;ctr-shift-d&quot;&gt;&lt;a href=&quot;#ctr-shift-d&quot; class=&quot;headerlink&quot; title=&quot;ctr+shift+d&quot;&gt;&lt;/a&gt;ctr+shift+d&lt;/h4&gt;&lt;p&gt;复制这行&lt;/p&gt;
&lt;h4 id=&quot;ctr-d&quot;&gt;&lt;a href=&quot;#ctr-d&quot; class=&quot;headerlink&quot; title=&quot;ctr+d&quot;&gt;&lt;/a&gt;ctr+d&lt;/h4&gt;&lt;p&gt;ctr+k 跳过一个&lt;br&gt;多行游标（alt+f3, shift+鼠标右键）&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Ubuntu下sublime3中文输入</title>
    <link href="https://carl-zk.github.io/blog/2017/02/28/Ubuntu%E4%B8%8Bsublime3%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5/"/>
    <id>https://carl-zk.github.io/blog/2017/02/28/Ubuntu%E4%B8%8Bsublime3%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5/</id>
    <published>2017-02-28T13:41:53.000Z</published>
    <updated>2024-05-18T08:19:43.162Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/9f2a11851b4e&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最近我折腾了个新linux系统debian，安装包才二百多MB。又把sublime3中文输入的问题搞了一遍。&lt;br&gt;首先，安装fcitx，fcitx-sunpinyin，然后卸载ibus-pinyin。&lt;br&gt;在～&amp;#x2F;.zshrc中添加export GTK_IM_MODULE&amp;#x3D;fcitx&lt;br&gt;运行: fcitx-autostart , fcitx-configtool.&lt;br&gt;到这，你可以安装sogou。不过我喜欢sun拼音，因为它现在不比sogou差了。&lt;/p&gt;
&lt;h4 id=&quot;1-保存下述代码为-sublime-imfix-c-文件&quot;&gt;&lt;a href=&quot;#1-保存下述代码为-sublime-imfix-c-文件&quot; class=&quot;headerlink&quot; title=&quot;1.保存下述代码为 sublime-imfix.c 文件&quot;&gt;&lt;/a&gt;1.保存下述代码为 sublime-imfix.c 文件&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;/blog/2</summary>
      
    
    
    
    <category term="系统配置" scheme="https://carl-zk.github.io/blog/categories/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>Maven使用</title>
    <link href="https://carl-zk.github.io/blog/2017/02/28/maven%E4%BD%BF%E7%94%A8/"/>
    <id>https://carl-zk.github.io/blog/2017/02/28/maven%E4%BD%BF%E7%94%A8/</id>
    <published>2017-02-28T06:56:26.000Z</published>
    <updated>2024-05-18T08:19:43.165Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;用IDEA建了一个maven项目，想打包成jar放到本地~&amp;#x2F;.m2&amp;#x2F;repository中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;1-安装maven&quot;&gt;&lt;a href=&quot;#1-安装maven&quot; class=&quot;headerlink&quot; title=&quot;1. 安装maven&quot;&gt;&lt;/a&gt;1. 安装maven&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;检查是否已安装：   &lt;code&gt;$ mvn -v&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;解压到&lt;code&gt;/opt/apache-maven-3.3.9&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;打开&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ subl ~/.zshrc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
我</summary>
      
    
    
    
    <category term="系统配置" scheme="https://carl-zk.github.io/blog/categories/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="maven" scheme="https://carl-zk.github.io/blog/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>给Spring-Mvc添加事务</title>
    <link href="https://carl-zk.github.io/blog/2017/02/28/%E7%BB%99spring-mvc%E6%B7%BB%E5%8A%A0%E4%BA%8B%E5%8A%A1/"/>
    <id>https://carl-zk.github.io/blog/2017/02/28/%E7%BB%99spring-mvc%E6%B7%BB%E5%8A%A0%E4%BA%8B%E5%8A%A1/</id>
    <published>2017-02-27T16:48:17.000Z</published>
    <updated>2024-05-18T08:19:43.207Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;所谓的spring容器，一般指的是spring-context所提供的IOC容器；但是我们一般都是要建立一个web项目，所以就要引入另一个依赖—spring-web，它也提供了一个容器，在web.xml文件中配置一个ContextLoaderListener就可以将IOC容器加入到spring-web容器中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/blog/2017/02/28/%E7%BB%99spring-mvc%E6%B7%BB%E5%8A%A0%E4%BA%8B%E5%8A%A1/container.svg&quot; alt=&quot;容器关系&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;很多博客都将了上面的这个事实，但是他们却没给一个很准确的给controller层加事务能力的方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/s</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Listener介绍</title>
    <link href="https://carl-zk.github.io/blog/2017/02/25/Listener%E4%BB%8B%E7%BB%8D/"/>
    <id>https://carl-zk.github.io/blog/2017/02/25/Listener%E4%BB%8B%E7%BB%8D/</id>
    <published>2017-02-25T13:56:04.000Z</published>
    <updated>2024-05-18T08:19:43.155Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;当web应用在web容器中运行时,web应用内部会不断的发生各种事件:web应用被启动、web应用被停止、用户session开始、用户session结束、用户请求到达等，通常来说这些web事件对开发者是透明的。&lt;br&gt;ServletAPI提供了大量监听器来监听web应用的内部事件，从而允许当web内部事件发生时回调事件监听器内的方法。&lt;br&gt;使用Listener只需两步：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;定义Listener实现类。&lt;/li&gt;
&lt;li&gt;通过Annotation或web.xml文件中配置Listener。&lt;/li&gt;
&lt;/ol&gt;
</summary>
      
    
    
    
    
    <category term="Servlet" scheme="https://carl-zk.github.io/blog/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>Filter介绍</title>
    <link href="https://carl-zk.github.io/blog/2017/02/25/Filter%E4%BB%8B%E7%BB%8D/"/>
    <id>https://carl-zk.github.io/blog/2017/02/25/Filter%E4%BB%8B%E7%BB%8D/</id>
    <published>2017-02-25T12:34:43.000Z</published>
    <updated>2024-05-18T08:19:43.149Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Filter可认为是Servlet的一种增强版,主要用于对用户请求进行预处理,也可以对HttpServletResponse进行后处理,是个典型的处理链. 也可对用户请求进行响应,但实际中很少这样用.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/blog/2017/02/25/Filter%E4%BB%8B%E7%BB%8D/filter-1.svg&quot; alt=&quot;Filter作用&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span cla</summary>
      
    
    
    
    
    <category term="Servlet" scheme="https://carl-zk.github.io/blog/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>JSP/Servlet及相关技术详解</title>
    <link href="https://carl-zk.github.io/blog/2017/02/25/JSP-Servlet%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E8%AF%A6%E8%A7%A3/"/>
    <id>https://carl-zk.github.io/blog/2017/02/25/JSP-Servlet%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E8%AF%A6%E8%A7%A3/</id>
    <published>2017-02-25T08:01:07.000Z</published>
    <updated>2024-05-18T08:19:43.150Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;JSP(Java Server Page) 和 Servlet 是 Java EE 规范的两个基本成员。JSP 和 Servlet 的本质是一样的，JSP最终必须编译成Servlet才能运行，可以理解为JSP是Servlet的“草稿”文件。JSP就是嵌套了Java代码的html页面。&lt;/p&gt;
&lt;h4 id=&quot;web应用和web-xml文件&quot;&gt;&lt;a href=&quot;#web应用和web-xml文件&quot; class=&quot;headerlink&quot; title=&quot;web应用和web.xml文件&quot;&gt;&lt;/a&gt;web应用和web.xml文件&lt;/h4&gt;&lt;h5 id=&quot;创建一个最简单的web应用&quot;&gt;&lt;a href=&quot;#创建一个最简单的web应用&quot; class=&quot;headerlink&quot; title=&quot;创建一个最简单的web应用&quot;&gt;&lt;/a&gt;创建一个最简单的web应用&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;新建文件夹webDemo；&lt;/li&gt;
&lt;li&gt;在webDemo内新建WEB-INF文件夹；&lt;/li&gt;
&lt;li&gt;在WEB-INF下加入一个web.xml文件；&lt;/li&gt;
&lt;/ol&gt;
 &lt;figure class=&quot;highl</summary>
      
    
    
    
    
    <category term="Servlet" scheme="https://carl-zk.github.io/blog/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>IDEA配置maven镜像</title>
    <link href="https://carl-zk.github.io/blog/2017/02/21/IDEA%E9%85%8D%E7%BD%AEmaven%E9%95%9C%E5%83%8F/"/>
    <id>https://carl-zk.github.io/blog/2017/02/21/IDEA%E9%85%8D%E7%BD%AEmaven%E9%95%9C%E5%83%8F/</id>
    <published>2017-02-21T07:40:21.000Z</published>
    <updated>2024-05-18T08:19:43.149Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;打开IntelliJ IDEA-&amp;gt;Settings -&amp;gt;Build, Execution, Deployment -&amp;gt; Build Tools &amp;gt; Maven&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/2017/02/21/IDEA%E9%85%8D%E7%BD%AEmaven%E9%95%9C%E5%83%8F/screenshot.png&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;p&gt;override  &lt;strong&gt;User settings file&lt;/strong&gt;, 在&lt;code&gt;&amp;lt;mirrors&amp;gt;&amp;lt;/mirrors&amp;gt;&lt;/code&gt;中添加alimaven.&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;</summary>
      
    
    
    
    <category term="系统配置" scheme="https://carl-zk.github.io/blog/categories/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>访问者模式</title>
    <link href="https://carl-zk.github.io/blog/2017/02/21/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://carl-zk.github.io/blog/2017/02/21/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2017-02-21T03:42:09.000Z</published>
    <updated>2024-05-18T08:19:43.210Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;有点绕.因为用到了双分派技术.首先是将具体状态作为参数传给”男人”类完成第一次分派,然后”男人”类调用具体状态中的方法将自己作为参数传进去,完成第二次分派.&lt;br&gt;这个模式中,Person的继承者个数是固定的,需要扩展的只是Aspect类,因此可以使用访问者模式.如果实际中Person类不确定,则不能使用访问者模式.&lt;br&gt;访问者模式适用于数据结构相对稳定的系统.(比如这里的男人和女人,只有两类)&lt;br&gt;它把数据结构和作用于结构上的操作之间的耦合解脱开,使得操作集合可以相对自由的演化.(对比这里就是,Man和Woman作为稳定的数据结构,而Success、Love等状态作为访问者,是对结构的操作嘛) &lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;s</summary>
      
    
    
    
    <category term="设计模式" scheme="https://carl-zk.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>享元模式</title>
    <link href="https://carl-zk.github.io/blog/2017/02/21/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <id>https://carl-zk.github.io/blog/2017/02/21/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</id>
    <published>2017-02-21T01:29:01.000Z</published>
    <updated>2024-05-18T08:19:43.194Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;如果大量对象只是某些细节不同,则可将这些不同抽离到外部,将相同的作为共享.那些不同的可作为参数传递.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    <category term="设计模式" scheme="https://carl-zk.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>中介者模式</title>
    <link href="https://carl-zk.github.io/blog/2017/02/20/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://carl-zk.github.io/blog/2017/02/20/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2017-02-20T11:46:07.000Z</published>
    <updated>2024-05-18T08:19:43.193Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;中介者的职责太多.&lt;/strong&gt;&lt;br&gt;一般应用在一组对象以定义良好但是复杂的方式进行通信的场合.以及想定制一个分布在多个类中的行为,而又不想生成太多子类的场合.&lt;br&gt;不要先使用中介者,要先考虑设计是否合理.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre</summary>
      
    
    
    
    <category term="设计模式" scheme="https://carl-zk.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>职责链模式</title>
    <link href="https://carl-zk.github.io/blog/2017/02/20/%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <id>https://carl-zk.github.io/blog/2017/02/20/%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/</id>
    <published>2017-02-20T11:14:35.000Z</published>
    <updated>2024-05-18T08:19:43.209Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;一个请求,沿链传递直到有一个Handler对象处理它.&lt;br&gt;接收者和发送者都没有对方的明确信息,且链中的对象自己也不知道链的结构.结果是职责链可以简化对象的相互连接,它们仅需保持一个指向其后继者的引用,而不需保持它所有的候选接收者的引用.&lt;br&gt;随时地增加或修改处理一个请求的结构.增强了给对象指派职责的灵活性.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; &lt;strong&gt;注意: 一个请求极有可能到了链的末端都得不到处理,或者因为没有正确配置而得不到处理.这是很糟糕的&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    <category term="设计模式" scheme="https://carl-zk.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>命令模式</title>
    <link href="https://carl-zk.github.io/blog/2017/02/20/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>https://carl-zk.github.io/blog/2017/02/20/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</id>
    <published>2017-02-20T08:23:52.000Z</published>
    <updated>2024-05-18T08:19:43.196Z</updated>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;它容易设计一个命令队列;&lt;/li&gt;
&lt;li&gt;在需要的情况下,可容易记入日志;&lt;/li&gt;
&lt;li&gt;允许接收请求的一方决定是否要否决请求;&lt;/li&gt;
&lt;li&gt;容易实现对请求的撤销和重做;&lt;/li&gt;
&lt;li&gt;由于加入新的具体命令类不影响其它类,因此增加新的会很容易.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;命令模式把请求一个操作的对象与知道怎么执行一个操作的对象分割开.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br</summary>
      
    
    
    
    <category term="设计模式" scheme="https://carl-zk.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>桥接模式</title>
    <link href="https://carl-zk.github.io/blog/2017/02/20/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://carl-zk.github.io/blog/2017/02/20/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2017-02-20T06:01:44.000Z</published>
    <updated>2024-05-18T08:19:43.203Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/blog/2017/02/20/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/bridge.svg&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果按照这种继承方式,无论添加一种软件或手机品牌,都需要增加不止一个类,维护极其复杂.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/blog/2017/02/20/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/bridge1.svg&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;采用合成&amp;#x2F;聚合的的方式则只需增加一个类.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;面向对象设计中一条很重要的原则,合成&amp;#x2F;聚合复用原则.即优先使用对象合成&amp;#x2F;聚合,而不是类继承.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在使用继承时,一定要在是”is-a”的关系时才考虑使用,而不是任何时候都去使用.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;让抽象部分和实现</summary>
      
    
    
    
    <category term="设计模式" scheme="https://carl-zk.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="https://carl-zk.github.io/blog/2017/02/20/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://carl-zk.github.io/blog/2017/02/20/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2017-02-20T03:51:16.000Z</published>
    <updated>2024-05-18T08:19:43.195Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;利用类加载机制的饿汉单例模式.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span cla</summary>
      
    
    
    
    <category term="设计模式" scheme="https://carl-zk.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>迭代器模式</title>
    <link href="https://carl-zk.github.io/blog/2017/02/20/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://carl-zk.github.io/blog/2017/02/20/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2017-02-20T03:04:25.000Z</published>
    <updated>2024-05-18T08:19:43.211Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;迭代器模式可以让你对聚集有多种遍历方式.&lt;br&gt;它分离了集合对象的遍历行为,抽象出一个迭代器来负责,这样既可以做到不暴露集合的内部结构,又可让外部代码透明的访问集合内部的数据.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;</summary>
      
    
    
    
    <category term="设计模式" scheme="https://carl-zk.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>组合模式</title>
    <link href="https://carl-zk.github.io/blog/2017/02/19/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    <id>https://carl-zk.github.io/blog/2017/02/19/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</id>
    <published>2017-02-19T13:17:54.000Z</published>
    <updated>2024-05-18T08:19:43.207Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;将对象组合成树形结构以表示”部分-整体”的层次结构.&lt;br&gt;使用户对单个对象和组合对象的使用具有一致性.&lt;br&gt;组合模式定义了包含&lt;strong&gt;基本对象&lt;/strong&gt;和&lt;strong&gt;组合对象&lt;/strong&gt;的类层次结构.基本对象可以被组合成更复杂的组合对象,而这个组合对象又可以被组合,这样不断的递归下去,客户代码中,任何用到基本对象的地方都可以使用组合对象.&lt;br&gt;用户不用关心到底是处理一个叶节点还是处理一个组合结点,也就用不着为定义组合而写一些选择判断语句了.简单说就是组合模式让客户可以一致性的使用组合结构和单个对象.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    <category term="设计模式" scheme="https://carl-zk.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>备忘录模式</title>
    <link href="https://carl-zk.github.io/blog/2017/02/19/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
    <id>https://carl-zk.github.io/blog/2017/02/19/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</id>
    <published>2017-02-19T11:08:19.000Z</published>
    <updated>2024-05-18T08:19:43.197Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在不破坏封装性的前提下,捕获一个对象的内部状态,并在该对象之外保存这个状态.这样以后就可以将该对象恢复到原先保存的状态.&lt;br&gt;快照模式和clone方式的区别在于此模式可以有选择性的保存.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/spa</summary>
      
    
    
    
    <category term="设计模式" scheme="https://carl-zk.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>适配器模式</title>
    <link href="https://carl-zk.github.io/blog/2017/02/19/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://carl-zk.github.io/blog/2017/02/19/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2017-02-19T09:16:36.000Z</published>
    <updated>2024-05-18T08:19:43.211Z</updated>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;两个类所做的事相同或相似,但是具有不同的接口.&lt;/li&gt;
&lt;li&gt;想使用一个已存在的类,但是其方法名与你要求的不同.&lt;/li&gt;
&lt;li&gt;必要时.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span clas</summary>
      
    
    
    
    <category term="设计模式" scheme="https://carl-zk.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>状态模式</title>
    <link href="https://carl-zk.github.io/blog/2017/02/19/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    <id>https://carl-zk.github.io/blog/2017/02/19/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</id>
    <published>2017-02-19T08:40:50.000Z</published>
    <updated>2024-05-18T08:19:43.204Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;把过于复杂的条件判断转移到不同状态的一系列类之中,使逻辑简化.&lt;br&gt;当一个对象的行为取决于它的状态,并且它必须在运行时刻根据状态改变它的行为时,就可以使用状态模式.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;spa</summary>
      
    
    
    
    <category term="设计模式" scheme="https://carl-zk.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>抽象工厂模式</title>
    <link href="https://carl-zk.github.io/blog/2017/02/19/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://carl-zk.github.io/blog/2017/02/19/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2017-02-19T07:43:30.000Z</published>
    <updated>2024-05-18T08:19:43.202Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;抽象工厂模式与简单工厂模式的区别在于,抽象工厂模式针对的是一系列对象,简单工厂模式是针对单独一个对象.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/blog/2017/02/19/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/abstractFactory.svg&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;p&gt;简单工厂模式可以简化抽象工厂模式,去掉AbstractFactory,ConcreteFactory1,ConcreteFactory2改为Factory.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/2017/02/19/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/abstractFactory2.svg&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;p&gt;利用反射去掉Factory中的switch…case…语句.&lt;/p&gt;
</summary>
      
    
    
    
    <category term="设计模式" scheme="https://carl-zk.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>观察者模式</title>
    <link href="https://carl-zk.github.io/blog/2017/02/18/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://carl-zk.github.io/blog/2017/02/18/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2017-02-18T08:06:33.000Z</published>
    <updated>2024-05-18T08:19:43.210Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Publish&amp;#x2F;Subscribe模式,定义了一种一对多的依赖关系,让多个观察者对象同时监听某一个主题对象.这个主题对象在状态发生变化时,会通知所有观察者对象,使它们能够自动更新自己.&lt;br&gt;意图是解除耦合,让耦合的双方都依赖抽象,而不依赖具体.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/s</summary>
      
    
    
    
    <category term="设计模式" scheme="https://carl-zk.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>建造者模式</title>
    <link href="https://carl-zk.github.io/blog/2017/02/18/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://carl-zk.github.io/blog/2017/02/18/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2017-02-18T06:37:42.000Z</published>
    <updated>2024-05-18T08:19:43.201Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;将一个复杂对象的构建和它的表示分离,使得同样的构建过程可以创建不同的表示.&lt;br&gt;用户只需指定需要构建的类型,过程和细节不需知道.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/</summary>
      
    
    
    
    <category term="设计模式" scheme="https://carl-zk.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>外观模式</title>
    <link href="https://carl-zk.github.io/blog/2017/02/18/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://carl-zk.github.io/blog/2017/02/18/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2017-02-18T05:49:13.000Z</published>
    <updated>2024-05-18T08:19:43.197Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;为子系统中的一组接口提供一个一致的界面,此模式定义了一个高层接口,这个接口使得这一子系统更加容易使用.&lt;br&gt;首先,在设计初期阶段应该要有意识的将不同的两个层分离.(如经典三层架构)&lt;br&gt;其次,在开发阶段,子系统往往因为不断的重构演化而变的越来越复杂,增加外观Facade可以提供一个简单的接口,减少它们之间的依赖.&lt;br&gt;第三,在维护一个遗留的大型系统时,可能这个系统已经非常难以维护和扩展了,为新系统开发一个外观Facade类,来提供设计粗糙或高度复杂的遗留代码的比较清晰简单的接口,让新系统与Facade对象交互,Facade与遗留代码交互所有复杂的工作.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/sp</summary>
      
    
    
    
    <category term="设计模式" scheme="https://carl-zk.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>模板方法模式</title>
    <link href="https://carl-zk.github.io/blog/2017/02/18/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>https://carl-zk.github.io/blog/2017/02/18/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</id>
    <published>2017-02-18T02:34:26.000Z</published>
    <updated>2024-05-18T08:19:43.204Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;所有重复的代码都应该上升到父类去.&lt;br&gt;当我们要完成在某一细节层次一致的一个过程或一系列步骤,但其个别步骤在更详细的层次上的实现可能不同时,我们通常考虑用模板方法模式来处理.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;</summary>
      
    
    
    
    <category term="设计模式" scheme="https://carl-zk.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>原型模式</title>
    <link href="https://carl-zk.github.io/blog/2017/02/18/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://carl-zk.github.io/blog/2017/02/18/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2017-02-18T01:47:17.000Z</published>
    <updated>2024-05-18T08:19:43.195Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;简单的区分一下深复制和浅复制,在java中只需要实现一下Cloneable接口,重写clone()就可以做到深复制.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;b</summary>
      
    
    
    
    <category term="设计模式" scheme="https://carl-zk.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>工厂方法模式</title>
    <link href="https://carl-zk.github.io/blog/2017/02/17/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>https://carl-zk.github.io/blog/2017/02/17/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</id>
    <published>2017-02-17T14:42:47.000Z</published>
    <updated>2024-05-18T08:19:43.201Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;满足&lt;strong&gt;开放-封闭原则&lt;/strong&gt;.&lt;br&gt;工厂方法模式实现时,客户端需要决定实例化哪一个工厂来实现运算类,选择判断的问题还是存在的,也就是说,工厂方法把简单工厂的内部逻辑判断移到了客户端代码来进行.你想要加功能,本来是改工厂类,而现在是修改客户端.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line</summary>
      
    
    
    
    <category term="设计模式" scheme="https://carl-zk.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>代理模式</title>
    <link href="https://carl-zk.github.io/blog/2017/02/17/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>https://carl-zk.github.io/blog/2017/02/17/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</id>
    <published>2017-02-17T13:30:50.000Z</published>
    <updated>2024-05-18T08:19:43.194Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;为其他对象提供一种代理以控制对这个对象的访问.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;</summary>
      
    
    
    
    <category term="设计模式" scheme="https://carl-zk.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>装饰模式</title>
    <link href="https://carl-zk.github.io/blog/2017/02/17/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/"/>
    <id>https://carl-zk.github.io/blog/2017/02/17/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</id>
    <published>2017-02-17T12:14:11.000Z</published>
    <updated>2024-05-18T08:19:43.210Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;装饰模式可以将职责和使用相分离.&lt;br&gt;对于人穿衣服而言,其实人是不应该继承Finery的,但是装饰模式需要这样的封装和继承.书中的例子就违背了”细节依赖于抽象”,这里明显的是抽象依赖了细节,把两个完全独立的对象弄成了继承的关系.气人不.&lt;br&gt;装饰模式其实是抽象出了一系列同类对象,然后让这些对象互相之间都能装饰.主要是体现在两个方法上: decorate() 和 show() , 又把shou()提高为最高接口,让两种不同的类(Person 和 服饰)进行关联,(Person类是没有decorate方法的).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line</summary>
      
    
    
    
    <category term="设计模式" scheme="https://carl-zk.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>策略模式</title>
    <link href="https://carl-zk.github.io/blog/2017/02/17/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://carl-zk.github.io/blog/2017/02/17/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2017-02-17T02:10:54.000Z</published>
    <updated>2024-05-18T08:19:43.206Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;策略模式主要是为了封装变化,体现在Context类中.&lt;br&gt;策略模式+工厂模式(如下Context类),可以更好的隔离客户端.(减少了耦合嘛)&lt;/p&gt;
&lt;h4 id=&quot;策略模式解析&quot;&gt;&lt;a href=&quot;#策略模式解析&quot; class=&quot;headerlink&quot; title=&quot;策略模式解析&quot;&gt;&lt;/a&gt;策略模式解析&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;策略模式是定义一系列算法的方法,从概念上看,所有这些算法完成的都是相同的工作,只是实现不同,它可以以相同的方式调用所有的算法,减少了各种算法类与使用算法类之间的耦合.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;b</summary>
      
    
    
    
    <category term="设计模式" scheme="https://carl-zk.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>简单工厂模式</title>
    <link href="https://carl-zk.github.io/blog/2017/02/16/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://carl-zk.github.io/blog/2017/02/16/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2017-02-16T12:29:15.000Z</published>
    <updated>2024-05-18T08:19:43.206Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;面向对象的好处:&lt;br&gt; 通过&lt;strong&gt;封装、继承、多态&lt;/strong&gt;把程序的耦合度降低;&lt;br&gt; 用设计模式使得程序更加的灵活,容易修改,并且易于复用.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;封装&lt;/strong&gt;&lt;br&gt;把客观事物抽象成一个类,只能通过类提供的方法操作内部数据,细节不可见.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;继承&lt;/strong&gt;&lt;br&gt; 子类拥有父类的方法和字段.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多态&lt;/strong&gt;&lt;br&gt;  一般来说多态是通过接口和抽象类来实现的，多个子类对接口、抽象类方法的不同实现，使得在使用接口和抽象类时有了不同的实现方式。(下面的OperationFactory就是最好的例子)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;面向对象设计五大原则&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;单一职责原则&lt;/strong&gt;(Single-Resposibility Principle)。”对一个类而言，应该仅有一个引起它变化的原因。”&lt;br&gt;&lt;strong&gt;开放封闭原则&lt;</summary>
      
    
    
    
    <category term="设计模式" scheme="https://carl-zk.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>大话设计模式</title>
    <link href="https://carl-zk.github.io/blog/2017/02/16/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://carl-zk.github.io/blog/2017/02/16/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2017-02-16T12:15:01.000Z</published>
    <updated>2024-05-18T08:19:43.197Z</updated>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;lt-lt-大话设计模式-gt-gt&quot;&gt;&lt;a href=&quot;#lt-lt-大话设计模式-gt-gt&quot; class=&quot;headerlink&quot; title=&quot;&amp;lt;&amp;lt;大话设计模式&amp;gt;&amp;gt;&quot;&gt;&lt;/a&gt;&amp;lt;&amp;lt;大话设计模式&amp;gt;&amp;gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;首先感谢程杰老师诙谐幽默的写作,让我终于入门,并且感谢程老师不追究我的法律责任(如果要追究,我将删除所有侵权内容^_^).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Design Pattern&lt;/strong&gt; 容易理解,不容易掌握.*开发过程中很难在一开始就将设计模式应用进去,一般都是在重构时将代码重构为某一模式.*本人是设计的菜鸟,但是有一颗高飞的理想,无奈人老健忘,所以干脆将设计模式全章节都记录进博客中,以后在工作中反复查阅.&lt;/p&gt;
&lt;h4 id=&quot;全书目录&quot;&gt;&lt;a href=&quot;#全书目录&quot; class=&quot;headerlink&quot; title=&quot;全书目录&quot;&gt;&lt;/a&gt;全书目录&lt;/h4&gt;</summary>
      
    
    
    
    <category term="设计模式" scheme="https://carl-zk.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>技术堆积栈</title>
    <link href="https://carl-zk.github.io/blog/2017/02/08/%E6%8A%80%E6%9C%AF%E5%A0%86%E7%A7%AF%E6%A0%88/"/>
    <id>https://carl-zk.github.io/blog/2017/02/08/%E6%8A%80%E6%9C%AF%E5%A0%86%E7%A7%AF%E6%A0%88/</id>
    <published>2017-02-08T05:11:04.000Z</published>
    <updated>2024-05-18T08:19:43.202Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;学习博客:&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;https://www.cnblogs.com/moonandstar08/p/4865190.html&quot;&gt;https://www.cnblogs.com/moonandstar08/p/4865190.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;jvm&quot;&gt;&lt;a href=&quot;#jvm&quot; class=&quot;headerlink&quot; title=&quot;jvm&quot;&gt;&lt;/a&gt;jvm&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/duanxz/tag/JVM%E8%99%9A%E6%8B%9F%E6%9C%BA/&quot;&gt;https://www.cnblogs.com/duanxz/tag/JVM%E8%99%9A%E6%8B%9F%E6%9C%BA/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;集合类&quot;&gt;&lt;a href=&quot;#集合类&quot; class=&quot;headerlink&quot; title=&quot;集合类&quot;&gt;&lt;/a&gt;集合类&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/s</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>小感</title>
    <link href="https://carl-zk.github.io/blog/2016/12/19/%E5%B0%8F%E6%84%9F/"/>
    <id>https://carl-zk.github.io/blog/2016/12/19/%E5%B0%8F%E6%84%9F/</id>
    <published>2016-12-19T15:11:43.000Z</published>
    <updated>2024-05-18T08:19:43.200Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;苦涩的青春就像一杯酒,还没喝醉我已经白了头.&lt;/p&gt;
&lt;p&gt;近来读完了&amp;lt;&amp;lt;红楼梦&amp;gt;&amp;gt;,又看完了电视剧,现在在看脂砚斋的评注版本.感叹作者文笔惊人之外也恨作者如此狠心,将他们都定为了苦命红颜.既然后四十回遗失,而又没有完美续作,所以我也很任性的给了我喜欢的角色一个不那么薄命的结果.在我心中,黛玉无意是宝玉的唯一人选,可惜黛玉泪尽而亡,作为被落魄的宝玉和宝钗,相依为命结成了”金玉良缘”,袭人则还是嫁给了蒋玉菡,王熙凤被休后痛定思痛,在弥留之际终于看透荣华富贵,含笑而死.这样,即便作为悲剧的主线,这样的结果还是能够让我安然入睡的,否则我又有多少眼泪来重读&amp;lt;&amp;lt;红楼梦&amp;gt;&amp;gt;!&lt;/p&gt;
&lt;p&gt;&amp;lt;&amp;lt;红楼梦&amp;gt;&amp;gt;就像一面镜子,让人看清了世事,也看清了自己.赋闲了半年,经历了迷茫和彷徨,惶恐和绝望,又重新找到了平静,我称之为”不幸之幸”.如果我仍旧那样机械的工作,半年时间我仍旧不会思考人生,不会让人生有多少的改变,因为我的内心是颓废的.当我经历了这半年的闲置,我发现了自己的迷茫,其实是害怕独自一人面对未来.我一直渴望一个爱人,一直</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>理想</title>
    <link href="https://carl-zk.github.io/blog/2016/12/05/%E7%90%86%E6%83%B3/"/>
    <id>https://carl-zk.github.io/blog/2016/12/05/%E7%90%86%E6%83%B3/</id>
    <published>2016-12-05T11:29:52.000Z</published>
    <updated>2024-05-18T08:19:43.204Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;我想在农村老家盖个养鸡场.&lt;br&gt;为村里盖所小学.&lt;br&gt;娶个老婆,陪我爸妈一起变老.&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>万进制</title>
    <link href="https://carl-zk.github.io/blog/2016/07/07/%E4%B8%87%E8%BF%9B%E5%88%B6/"/>
    <id>https://carl-zk.github.io/blog/2016/07/07/%E4%B8%87%E8%BF%9B%E5%88%B6/</id>
    <published>2016-07-06T17:20:06.000Z</published>
    <updated>2024-05-18T08:19:43.193Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1041&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Computer Transformation&lt;/p&gt;
&lt;p&gt;Problem Description&lt;br&gt;A sequence consisting of one digit, the number 1 is initially written into a computer. At each successive time step, the computer simultaneously tranforms each digit 0 into the sequence 1 0 and each digit 1 into the sequence 0 1. So, after the first time step, the sequence 0 1 is obtained; after the second, the sequence 1 0 0 1, after the third, the sequence 0 1 1 0 1</summary>
      
    
    
    
    <category term="hdu" scheme="https://carl-zk.github.io/blog/categories/hdu/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript对象、继承和原型链</title>
    <link href="https://carl-zk.github.io/blog/2016/07/04/JavaScript%E5%AF%B9%E8%B1%A1%E3%80%81%E7%BB%A7%E6%89%BF%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>https://carl-zk.github.io/blog/2016/07/04/JavaScript%E5%AF%B9%E8%B1%A1%E3%80%81%E7%BB%A7%E6%89%BF%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/</id>
    <published>2016-07-04T08:04:07.000Z</published>
    <updated>2024-05-18T08:19:43.151Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;JavaScript 与 Java 在面向对象编程方面类似，都是引用传递。如&lt;br&gt;name &amp;#x3D; ‘小明’&lt;br&gt;字符串是一个对象，属性字段是指向这个字符串对象的引用。&lt;br&gt;Java 中的继承，在 JavaScript 中成了原型链，原型链上的每个节点都是一个对象实例，这是与 Java 不同的地方。&lt;/p&gt;
&lt;h2 id=&quot;对象&quot;&gt;&lt;a href=&quot;#对象&quot; class=&quot;headerlink&quot; title=&quot;对象&quot;&gt;&lt;/a&gt;对象&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;</summary>
      
    
    
    
    
    <category term="javascript" scheme="https://carl-zk.github.io/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>The 3n + 1 Problem</title>
    <link href="https://carl-zk.github.io/blog/2016/07/04/The-3n-1-problem/"/>
    <id>https://carl-zk.github.io/blog/2016/07/04/The-3n-1-problem/</id>
    <published>2016-07-04T03:06:31.000Z</published>
    <updated>2024-05-18T08:19:43.161Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1032&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;Problem Description&lt;br&gt;Problems in Computer Science are often classified as belonging to a certain class of problems (e.g., NP, Unsolvable, Recursive). In this problem you will be analyzing a property of an algorithm whose classification is not known for all possible inputs.&lt;/p&gt;
&lt;p&gt;Consider the following algorithm T: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.      input n

2.      print n

3.      if n = 1 then STOP

4.           if n is odd then n</summary>
      
    
    
    
    <category term="hdu" scheme="https://carl-zk.github.io/blog/categories/hdu/"/>
    
    
  </entry>
  
  <entry>
    <title>Ignatius and the Princess III</title>
    <link href="https://carl-zk.github.io/blog/2016/07/03/Ignatius-and-the-Princess-III/"/>
    <id>https://carl-zk.github.io/blog/2016/07/03/Ignatius-and-the-Princess-III/</id>
    <published>2016-07-02T21:23:05.000Z</published>
    <updated>2024-05-18T08:19:43.150Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1028&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;Problem Description&lt;br&gt;“Well, it seems the first problem is too easy. I will let you know how foolish you are later.” feng5166 says.&lt;/p&gt;
&lt;p&gt;“The second problem is, given an positive integer N, we define an equation like this:&lt;br&gt;  N&amp;#x3D;a[1]+a[2]+a[3]+…+a[m];&lt;br&gt;  a[i]&amp;gt;0,1&amp;lt;&amp;#x3D;m&amp;lt;&amp;#x3D;N;&lt;br&gt;My question is how many different equations you can find for a given N.&lt;br&gt;For example, assume N is 4, we can find:&lt;br&gt;  4 &amp;</summary>
      
    
    
    
    <category term="hdu" scheme="https://carl-zk.github.io/blog/categories/hdu/"/>
    
    
    <category term="递归" scheme="https://carl-zk.github.io/blog/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>Ignatius and the Princess II</title>
    <link href="https://carl-zk.github.io/blog/2016/07/03/Ignatius-and-the-Princess-II/"/>
    <id>https://carl-zk.github.io/blog/2016/07/03/Ignatius-and-the-Princess-II/</id>
    <published>2016-07-02T18:58:25.000Z</published>
    <updated>2024-05-18T08:19:43.150Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1027&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;Problem Description&lt;br&gt;Now our hero finds the door to the BEelzebub feng5166. He opens the door and finds feng5166 is about to kill our pretty Princess. But now the BEelzebub has to beat our hero first. feng5166 says, “I have three question for you, if you can work them out, I will release the Princess, or you will be my dinner, too.” Ignatius says confidently, “OK, at last, I will save the Princess.”&lt;/p&gt;
&lt;p&gt;“Now I will show</summary>
      
    
    
    
    <category term="hdu" scheme="https://carl-zk.github.io/blog/categories/hdu/"/>
    
    
  </entry>
  
  <entry>
    <title>Ignatius and the Princess I</title>
    <link href="https://carl-zk.github.io/blog/2016/07/02/Ignatius-and-the-Princess-I/"/>
    <id>https://carl-zk.github.io/blog/2016/07/02/Ignatius-and-the-Princess-I/</id>
    <published>2016-07-02T07:30:45.000Z</published>
    <updated>2024-05-18T08:19:43.150Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1026&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;Problem Description&lt;br&gt;The Princess has been abducted by the BEelzebub feng5166, our hero Ignatius has to rescue our pretty Princess. Now he gets into feng5166’s castle. The castle is a large labyrinth. To make the problem simply, we assume the labyrinth is a N*M two-dimensional array which left-top corner is (0,0) and right-bottom corner is (N-1,M-1). Ignatius enters at (0,0), and the door to feng5166’s room is at (N-1,M-1)</summary>
      
    
    
    
    <category term="hdu" scheme="https://carl-zk.github.io/blog/categories/hdu/"/>
    
    
  </entry>
  
  <entry>
    <title>最长上升子序列</title>
    <link href="https://carl-zk.github.io/blog/2016/07/01/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <id>https://carl-zk.github.io/blog/2016/07/01/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/</id>
    <published>2016-06-30T16:45:06.000Z</published>
    <updated>2024-05-18T08:19:43.202Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1025&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;Constructing Roads In JGShining’s Kingdom&lt;/p&gt;
&lt;p&gt;Input&lt;br&gt;Each test case will begin with a line containing an integer n(1 ≤ n ≤ 500,000). Then n lines follow. Each line contains two integers p and r which represents that Poor City p needs to import resources from Rich City r. Process to the end of file.&lt;/p&gt;
&lt;p&gt;Output&lt;br&gt;For each test case, output the result in the form of sample.&lt;br&gt;You should tell JGShining what’s the maxim</summary>
      
    
    
    
    <category term="hdu" scheme="https://carl-zk.github.io/blog/categories/hdu/"/>
    
    
  </entry>
  
  <entry>
    <title>Train Problem I</title>
    <link href="https://carl-zk.github.io/blog/2016/06/30/Train-Problem-I/"/>
    <id>https://carl-zk.github.io/blog/2016/06/30/Train-Problem-I/</id>
    <published>2016-06-30T06:30:04.000Z</published>
    <updated>2024-05-18T08:19:43.162Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1022&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;Problem Description&lt;br&gt;As the new term comes, the Ignatius Train Station is very busy nowadays. A lot of student want to get back to school by train(because the trains in the Ignatius Train Station is the fastest all over the world ^v^). But here comes a problem, there is only one railway where all the trains stop. So all the trains come in from one side and get out from the other side. For this problem, if train A gets into</summary>
      
    
    
    
    <category term="hdu" scheme="https://carl-zk.github.io/blog/categories/hdu/"/>
    
    
  </entry>
  
  <entry>
    <title>Fibonacci Again</title>
    <link href="https://carl-zk.github.io/blog/2016/06/30/Fibonacci-Again/"/>
    <id>https://carl-zk.github.io/blog/2016/06/30/Fibonacci-Again/</id>
    <published>2016-06-30T05:28:56.000Z</published>
    <updated>2024-05-18T08:19:43.148Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1021&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;Problem Description&lt;br&gt;There are another kind of Fibonacci numbers: F(0) &amp;#x3D; 7, F(1) &amp;#x3D; 11, F(n) &amp;#x3D; F(n-1) + F(n-2) (n&amp;gt;&amp;#x3D;2).&lt;/p&gt;
&lt;p&gt;Input&lt;br&gt;Input consists of a sequence of lines, each containing an integer n. (n &amp;lt; 1,000,000).&lt;/p&gt;
&lt;p&gt;Output&lt;br&gt;Print the word “yes” if 3 divide evenly into F(n).&lt;/p&gt;
&lt;p&gt;Print the word “no” if not.&lt;/p&gt;
&lt;p&gt;Sample Input&lt;br&gt;0&lt;br&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;4&lt;br&gt;5&lt;/p&gt;
&lt;p&gt;Sample Output&lt;br&gt;no&lt;</summary>
      
    
    
    
    <category term="hdu" scheme="https://carl-zk.github.io/blog/categories/hdu/"/>
    
    
  </entry>
  
  <entry>
    <title>Prime Ring Problem</title>
    <link href="https://carl-zk.github.io/blog/2016/06/30/Prime-Ring-Problem/"/>
    <id>https://carl-zk.github.io/blog/2016/06/30/Prime-Ring-Problem/</id>
    <published>2016-06-29T20:35:20.000Z</published>
    <updated>2024-05-18T08:19:43.159Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1016&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;Problem Description&lt;br&gt;A ring is compose of n circles as shown in diagram. Put natural number 1, 2, …, n into each circle separately, and the sum of numbers in two adjacent circles should be a prime.&lt;/p&gt;
&lt;p&gt;Note: the number of first circle should always be 1.&lt;/p&gt;
&lt;p&gt;Input&lt;br&gt;n (0 &amp;lt; n &amp;lt; 20).&lt;/p&gt;
&lt;p&gt;Output&lt;br&gt;The output format is shown as sample below. Each row represents a series of circle numbers in the ring beginning </summary>
      
    
    
    
    <category term="hdu" scheme="https://carl-zk.github.io/blog/categories/hdu/"/>
    
    
    <category term="递归" scheme="https://carl-zk.github.io/blog/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>Safecracker</title>
    <link href="https://carl-zk.github.io/blog/2016/06/30/Safecracker/"/>
    <id>https://carl-zk.github.io/blog/2016/06/30/Safecracker/</id>
    <published>2016-06-29T18:39:42.000Z</published>
    <updated>2024-05-18T08:19:43.160Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1015&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;Problem Description&lt;br&gt;&amp;#x3D;&amp;#x3D;&amp;#x3D; Op tech briefing, 2002&amp;#x2F;11&amp;#x2F;02 06:42 CST &amp;#x3D;&amp;#x3D;&amp;#x3D;&lt;br&gt;“The item is locked in a Klein safe behind a painting in the second-floor library. Klein safes are extremely rare; most of them, along with Klein and his factory, were destroyed in World War II. Fortunately old Brumbaugh from research knew Klein’s secrets and wrote them down before he died. A Klein safe has two di</summary>
      
    
    
    
    <category term="hdu" scheme="https://carl-zk.github.io/blog/categories/hdu/"/>
    
    
  </entry>
  
  <entry>
    <title>Starship Troopers</title>
    <link href="https://carl-zk.github.io/blog/2016/06/29/Starship-Troopers/"/>
    <id>https://carl-zk.github.io/blog/2016/06/29/Starship-Troopers/</id>
    <published>2016-06-29T13:34:07.000Z</published>
    <updated>2024-05-18T08:19:43.161Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1011&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;Problem Description&lt;br&gt;You, the leader of Starship Troopers, are sent to destroy a base of the bugs. The base is built underground. It is actually a huge cavern, which consists of many rooms connected with tunnels. Each room is occupied by some bugs, and their brains hide in some of the rooms. Scientists have just developed a new weapon and want to experiment it on some brains. Your task is to destroy the whole base, and cap</summary>
      
    
    
    
    <category term="hdu" scheme="https://carl-zk.github.io/blog/categories/hdu/"/>
    
    
  </entry>
  
  <entry>
    <title>奇偶剪枝</title>
    <link href="https://carl-zk.github.io/blog/2016/06/28/%E5%A5%87%E5%81%B6%E5%89%AA%E6%9E%9D/"/>
    <id>https://carl-zk.github.io/blog/2016/06/28/%E5%A5%87%E5%81%B6%E5%89%AA%E6%9E%9D/</id>
    <published>2016-06-28T14:11:34.000Z</published>
    <updated>2024-05-18T08:19:43.197Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1010&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;Tempter of the Bone&lt;/p&gt;
&lt;p&gt;Time Limit: 2000&amp;#x2F;1000 MS (Java&amp;#x2F;Others)    Memory Limit: 65536&amp;#x2F;32768 K (Java&amp;#x2F;Others)&lt;br&gt;Total Submission(s): 104098    Accepted Submission(s): 28268&lt;/p&gt;
&lt;p&gt;Problem Description&lt;br&gt;The doggie found a bone in an ancient maze, which fascinated him a lot. However, when he picked it up, the maze began to shake, and the doggie could feel the ground sinking. He realized that the bone was</summary>
      
    
    
    
    <category term="hdu" scheme="https://carl-zk.github.io/blog/categories/hdu/"/>
    
    
  </entry>
  
  <entry>
    <title>最近点对</title>
    <link href="https://carl-zk.github.io/blog/2016/06/27/%E6%9C%80%E8%BF%91%E7%82%B9%E5%AF%B9/"/>
    <id>https://carl-zk.github.io/blog/2016/06/27/%E6%9C%80%E8%BF%91%E7%82%B9%E5%AF%B9/</id>
    <published>2016-06-27T13:48:46.000Z</published>
    <updated>2024-05-18T08:19:43.202Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1007&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;Quoit Design&lt;/p&gt;
&lt;p&gt;Time Limit: 10000&amp;#x2F;5000 MS (Java&amp;#x2F;Others)    Memory Limit: 65536&amp;#x2F;32768 K (Java&amp;#x2F;Others)&lt;br&gt;Total Submission(s): 45620    Accepted Submission(s): 11871&lt;/p&gt;
&lt;p&gt;Problem Description&lt;br&gt;Have you ever played quoit in a playground? Quoit is a game in which flat rings are pitched at some toys, with all the toys encircled awarded.&lt;br&gt;In the field of Cyberground, the position of each toy is fixed, </summary>
      
    
    
    
    <category term="hdu" scheme="https://carl-zk.github.io/blog/categories/hdu/"/>
    
    
  </entry>
  
  <entry>
    <title>Let the Balloon Rise</title>
    <link href="https://carl-zk.github.io/blog/2016/06/27/Let-the-Balloon-Rise/"/>
    <id>https://carl-zk.github.io/blog/2016/06/27/Let-the-Balloon-Rise/</id>
    <published>2016-06-27T03:58:21.000Z</published>
    <updated>2024-05-18T08:19:43.155Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1004&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;Problem Description&lt;br&gt;Contest time again! How excited it is to see balloons floating around. But to tell you a secret, the judges’ favorite time is guessing the most popular problem. When the contest is over, they will count the balloons of each color and find the result.&lt;/p&gt;
&lt;p&gt;This year, they decide to leave this lovely job to you. &lt;/p&gt;
&lt;p&gt;Input&lt;br&gt;Input contains multiple test cases. Each test case starts with a number N </summary>
      
    
    
    
    <category term="hdu" scheme="https://carl-zk.github.io/blog/categories/hdu/"/>
    
    
  </entry>
  
  <entry>
    <title>最大子段和</title>
    <link href="https://carl-zk.github.io/blog/2016/06/27/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C/"/>
    <id>https://carl-zk.github.io/blog/2016/06/27/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C/</id>
    <published>2016-06-27T02:05:28.000Z</published>
    <updated>2024-05-18T08:19:43.202Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1003&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;Max Sum&lt;/p&gt;
&lt;p&gt;Time Limit: 2000&amp;#x2F;1000 MS (Java&amp;#x2F;Others)    Memory Limit: 65536&amp;#x2F;32768 K (Java&amp;#x2F;Others)&lt;br&gt;Total Submission(s): 211834    Accepted Submission(s): 49757&lt;/p&gt;
&lt;p&gt;Problem Description&lt;br&gt;Given a sequence a[1],a[2],a[3]……a[n], your job is to calculate the max sum of a sub-sequence. For example, given (6,-1,5,4,-7), the max sum in this sequence is 6 + (-1) + 5 + 4 &amp;#x3D; 14.&lt;/p&gt;
&lt;p&gt;Input&lt;br&gt;The first </summary>
      
    
    
    
    <category term="hdu" scheme="https://carl-zk.github.io/blog/categories/hdu/"/>
    
    
  </entry>
  
  <entry>
    <title>第2章 递归与分治策略</title>
    <link href="https://carl-zk.github.io/blog/2016/06/26/%E7%AC%AC2%E7%AB%A0-%E9%80%92%E5%BD%92%E4%B8%8E%E5%88%86%E6%B2%BB%E7%AD%96%E7%95%A5/"/>
    <id>https://carl-zk.github.io/blog/2016/06/26/%E7%AC%AC2%E7%AB%A0-%E9%80%92%E5%BD%92%E4%B8%8E%E5%88%86%E6%B2%BB%E7%AD%96%E7%95%A5/</id>
    <published>2016-06-26T14:38:00.000Z</published>
    <updated>2024-05-18T08:19:43.205Z</updated>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;1-全排列&quot;&gt;&lt;a href=&quot;#1-全排列&quot; class=&quot;headerlink&quot; title=&quot;1. 全排列&quot;&gt;&lt;/a&gt;1. 全排列&lt;/h5&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    
    <category term="递归" scheme="https://carl-zk.github.io/blog/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>A + B Problem II</title>
    <link href="https://carl-zk.github.io/blog/2016/06/26/A-B-Problem-II/"/>
    <id>https://carl-zk.github.io/blog/2016/06/26/A-B-Problem-II/</id>
    <published>2016-06-26T02:35:08.000Z</published>
    <updated>2024-05-18T08:19:43.147Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1002&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;Problem Description&lt;br&gt;I have a very simple problem for you. Given two integers A and B, your job is to calculate the Sum of A + B.&lt;/p&gt;
&lt;p&gt;Input&lt;br&gt;The first line of the input contains an integer T(1&amp;lt;&amp;#x3D;T&amp;lt;&amp;#x3D;20) which means the number of test cases. Then T lines follow, each line consists of two positive integers, A and B. Notice that the integers are very large, that means you should not process them by using 32</summary>
      
    
    
    
    <category term="hdu" scheme="https://carl-zk.github.io/blog/categories/hdu/"/>
    
    
  </entry>
  
  <entry>
    <title>Stirling数</title>
    <link href="https://carl-zk.github.io/blog/2016/06/25/stirling%E6%95%B0/"/>
    <id>https://carl-zk.github.io/blog/2016/06/25/stirling%E6%95%B0/</id>
    <published>2016-06-25T08:35:51.000Z</published>
    <updated>2024-05-18T08:19:43.167Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/game/entry/problem/show.php?chapterid=2&amp;sectionid=2&amp;problemid=11&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;Examining the Rooms&lt;/p&gt;
&lt;p&gt;Time Limit: 2000&amp;#x2F;1000 MS (Java&amp;#x2F;Others) Memory Limit: 32768&amp;#x2F;32768 K (Java&amp;#x2F;Others)&lt;br&gt;Total Submission(s): 801 Accepted Submission(s): 437&lt;/p&gt;
&lt;p&gt;Problem Description&lt;br&gt;A murder happened in the hotel. As the best detective in the town, you should examine all the N rooms of the hotel immediately. However, all the doors of the rooms are locked</summary>
      
    
    
    
    <category term="hdu" scheme="https://carl-zk.github.io/blog/categories/hdu/"/>
    
    
    <category term="递归" scheme="https://carl-zk.github.io/blog/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>哈哈,发现Hdu错题一道</title>
    <link href="https://carl-zk.github.io/blog/2016/06/24/%E5%93%88%E5%93%88-%E5%8F%91%E7%8E%B0hdu%E9%94%99%E9%A2%98%E4%B8%80%E9%81%93/"/>
    <id>https://carl-zk.github.io/blog/2016/06/24/%E5%93%88%E5%93%88-%E5%8F%91%E7%8E%B0hdu%E9%94%99%E9%A2%98%E4%B8%80%E9%81%93/</id>
    <published>2016-06-23T18:01:12.000Z</published>
    <updated>2024-05-18T08:19:43.196Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/game/entry/problem/show.php?chapterid=2&amp;sectionid=2&amp;problemid=8&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;Number Sequence&lt;/p&gt;
&lt;p&gt;Time Limit: 2000&amp;#x2F;1000 MS (Java&amp;#x2F;Others) Memory Limit: 65536&amp;#x2F;32768 K (Java&amp;#x2F;Others)&lt;br&gt;Total Submission(s): 1762 Accepted Submission(s): 675&lt;/p&gt;
&lt;p&gt;Problem Description&lt;br&gt;A number sequence is defined as follows:&lt;/p&gt;
&lt;p&gt;f(1) &amp;#x3D; 1, f(2) &amp;#x3D; 1, f(n) &amp;#x3D; (A * f(n - 1) + B * f(n - 2)) mod 7.&lt;/p&gt;
&lt;p&gt;Given A, B, and n, you are to calculate the </summary>
      
    
    
    
    <category term="hdu" scheme="https://carl-zk.github.io/blog/categories/hdu/"/>
    
    
  </entry>
  
  <entry>
    <title>Wolf and Rabbit</title>
    <link href="https://carl-zk.github.io/blog/2016/06/23/Wolf-and-Rabbit/"/>
    <id>https://carl-zk.github.io/blog/2016/06/23/Wolf-and-Rabbit/</id>
    <published>2016-06-23T14:52:21.000Z</published>
    <updated>2024-05-18T08:19:43.162Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/game/entry/problem/show.php?chapterid=2&amp;sectionid=2&amp;problemid=4&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;Problem Description&lt;br&gt;There is a hill with n holes around. The holes are signed from 0 to n-1.&lt;/p&gt;
&lt;p&gt;A rabbit must hide in one of the holes. A wolf searches the rabbit in anticlockwise order. The first hole he get into is the one signed with 0. Then he will get into the hole every m holes. For example, m&amp;#x3D;2 and n&amp;#x3D;6, the wolf will get into the holes which are signed 0,2,4,0. I</summary>
      
    
    
    
    <category term="hdu" scheme="https://carl-zk.github.io/blog/categories/hdu/"/>
    
    
  </entry>
  
  <entry>
    <title>汉诺塔VII</title>
    <link href="https://carl-zk.github.io/blog/2016/06/23/%E6%B1%89%E8%AF%BA%E5%A1%94VII/"/>
    <id>https://carl-zk.github.io/blog/2016/06/23/%E6%B1%89%E8%AF%BA%E5%A1%94VII/</id>
    <published>2016-06-23T10:01:47.000Z</published>
    <updated>2024-05-18T08:19:43.204Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/game/entry/problem/show.php?chapterid=2&amp;sectionid=2&amp;problemid=3&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;Problem Description&lt;br&gt;n个盘子的汉诺塔问题的最少移动次数是2^n-1,即在移动过程中会产生2^n个系列。由于发生错移产生的系列就增加了，这种错误是放错了柱子，并不会把大盘放到小盘上，即各柱子从下往上的大小仍保持如下关系 ：&lt;br&gt;n&amp;#x3D;m+p+q&lt;br&gt;a1&amp;gt;a2&amp;gt;…&amp;gt;am&lt;br&gt;b1&amp;gt;b2&amp;gt;…&amp;gt;bp&lt;br&gt;c1&amp;gt;c2&amp;gt;…&amp;gt;cq&lt;br&gt;ai是A柱上的盘的盘号系列，bi是B柱上的盘的盘号系列， ci是C柱上的盘的盘号系列，最初目标是将A柱上的n个盘子移到C盘. 给出1个系列，判断它是否是在正确的移动中产生的系列.&lt;br&gt;例1：n&amp;#x3D;3&lt;br&gt;3&lt;br&gt;2&lt;br&gt;1&lt;br&gt;是正确的&lt;br&gt;例2：n&amp;#x3D;3&lt;br&gt;3&lt;br&gt;1&lt;br&gt;2&lt;br&gt;是不正确的。&lt;br&gt;注：对于例2</summary>
      
    
    
    
    <category term="hdu" scheme="https://carl-zk.github.io/blog/categories/hdu/"/>
    
    
    <category term="递归" scheme="https://carl-zk.github.io/blog/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>Joseph</title>
    <link href="https://carl-zk.github.io/blog/2016/06/23/Joseph/"/>
    <id>https://carl-zk.github.io/blog/2016/06/23/Joseph/</id>
    <published>2016-06-23T05:37:53.000Z</published>
    <updated>2024-05-18T08:19:43.154Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/game/entry/problem/show.php?chapterid=2&amp;sectionid=2&amp;problemid=2&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;Problem Description&lt;br&gt;The Joseph&#92;&#92;&#92;&amp;#39;s problem is notoriously known. For those who are not familiar with the original problem: from among n people, numbered 1, 2, . . ., n, standing in circle every mth is going to be executed and only the life of the last remaining person will be saved. Joseph was smart enough to choose the position of the last remaining person, thus saving his life</summary>
      
    
    
    
    <category term="hdu" scheme="https://carl-zk.github.io/blog/categories/hdu/"/>
    
    
  </entry>
  
  <entry>
    <title>Fibonacci</title>
    <link href="https://carl-zk.github.io/blog/2016/06/23/Fibonacci/"/>
    <id>https://carl-zk.github.io/blog/2016/06/23/Fibonacci/</id>
    <published>2016-06-22T16:32:40.000Z</published>
    <updated>2024-05-18T08:19:43.149Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/game/entry/problem/show.php?chapterid=2&amp;sectionid=2&amp;problemid=1&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;Problem Description&lt;br&gt;2007年到来了。经过2006年一年的修炼，数学神童zouyu终于把0到100000000的Fibonacci数列&lt;br&gt;(f[0]&amp;#x3D;0,f[1]&amp;#x3D;1;f[i] &amp;#x3D; f[i-1]+f&lt;a href=&quot;i%3E=2&quot;&gt;i-2&lt;/a&gt;)的值全部给背了下来。&lt;br&gt;接下来，CodeStar决定要考考他，于是每问他一个数字，他就要把答案说出来，不过有的数字太长了。所以规定超过4位的只要说出前4位就可以了，可是CodeStar自己又记不住。于是他决定编写一个程序来测验zouyu说的是否正确。&lt;/p&gt;
&lt;p&gt;Input&lt;br&gt;输入若干数字n(0 &amp;lt;&amp;#x3D; n &amp;lt;&amp;#x3D; 100000000)，每个数字一行。读到文件尾。&lt;/p&gt;
&lt;p&gt;Output&lt;br&gt;输出f[n]的前4个数字（若不</summary>
      
    
    
    
    <category term="hdu" scheme="https://carl-zk.github.io/blog/categories/hdu/"/>
    
    
  </entry>
  
  <entry>
    <title>找新朋友</title>
    <link href="https://carl-zk.github.io/blog/2016/06/22/%E6%89%BE%E6%96%B0%E6%9C%8B%E5%8F%8B/"/>
    <id>https://carl-zk.github.io/blog/2016/06/22/%E6%89%BE%E6%96%B0%E6%9C%8B%E5%8F%8B/</id>
    <published>2016-06-22T12:00:27.000Z</published>
    <updated>2024-05-18T08:19:43.201Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/game/entry/problem/show.php?chapterid=2&amp;sectionid=1&amp;problemid=8&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;Problem Description&lt;br&gt;新年快到了，“猪头帮协会”准备搞一个聚会，已经知道现有会员N人，把会员从1到N编号，其中会长的号码是N号，凡是和会长是老朋友的，那么该会员的号码肯定和N有大于1的公约数，否则都是新朋友，现在会长想知道究竟有几个新朋友？请你编程序帮会长计算出来。&lt;/p&gt;
&lt;p&gt;Input&lt;br&gt;第一行是测试数据的组数CN（Case number，1&amp;lt;CN&amp;lt;10000），接着有CN行正整数N（1&amp;lt;n&amp;lt;32768），表示会员人数。&lt;/p&gt;
&lt;p&gt;Output&lt;br&gt;对于每一个N，输出一行新朋友的人数，这样共有CN行输出。&lt;/p&gt;
&lt;p&gt;Sample Input&lt;br&gt;2&lt;br&gt;25608&lt;br&gt;24027&lt;/p&gt;
&lt;p&gt;Sample Output&lt;br&gt;7680&lt;br&gt;16016&lt;/p&gt;
&lt;hr/&gt;

&lt;blockquo</summary>
      
    
    
    
    <category term="hdu" scheme="https://carl-zk.github.io/blog/categories/hdu/"/>
    
    
  </entry>
  
  <entry>
    <title>七夕节</title>
    <link href="https://carl-zk.github.io/blog/2016/06/22/%E4%B8%83%E5%A4%95%E8%8A%82/"/>
    <id>https://carl-zk.github.io/blog/2016/06/22/%E4%B8%83%E5%A4%95%E8%8A%82/</id>
    <published>2016-06-22T10:06:54.000Z</published>
    <updated>2024-05-18T08:19:43.193Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;Problem Description&lt;br&gt;七夕节那天,月老来到数字王国,他在城门上贴了一张告示,并且和数字王国的人们说:”你们想知道你们的另一半是谁吗?那就按照告示上的方法去找吧!”&lt;br&gt;人们纷纷来到告示前,都想知道谁才是自己的另一半.告示如下:&lt;/p&gt;
&lt;p&gt;**每个人都有唯一的编号,将编号的所有因子加起来组成的编号,就是你的另一半.  **&lt;/p&gt;
&lt;p&gt;数字N的因子就是所有比N小又能被N整除的所有正整数,如12的因子有1,2,3,4,6.&lt;br&gt;你想知道你的另一半吗?&lt;/p&gt;
&lt;p&gt;Input&lt;br&gt;输入数据的第一行是一个数字T(1&amp;lt;&amp;#x3D;T&amp;lt;&amp;#x3D;500000),它表明测试数据的组数.然后是T组测试数据,每组测试数据只有一个数字N(1&amp;lt;&amp;#x3D;N&amp;lt;&amp;#x3D;500000).&lt;/p&gt;
&lt;p&gt;Output&lt;br&gt;对于每组测试数据,请输出一个代表输入数据N的另一半的编号.&lt;/p&gt;
&lt;p&gt;Sample Input&lt;br&gt;3&lt;br&gt;2&lt;br&gt;10&lt;br&gt;20&lt;/p&gt;
&lt;p&gt;Sample O</summary>
      
    
    
    
    <category term="hdu" scheme="https://carl-zk.github.io/blog/categories/hdu/"/>
    
    
  </entry>
  
  <entry>
    <title>Largest Prime Factor</title>
    <link href="https://carl-zk.github.io/blog/2016/06/22/Largest-prime-factor/"/>
    <id>https://carl-zk.github.io/blog/2016/06/22/Largest-prime-factor/</id>
    <published>2016-06-22T09:45:58.000Z</published>
    <updated>2024-05-18T08:19:43.154Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/game/entry/problem/show.php?chapterid=2&amp;sectionid=1&amp;problemid=5&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;Problem Description&lt;br&gt;Everybody knows any number can be combined by the prime number.&lt;br&gt;Now, your task is telling me what position of the largest prime factor.&lt;br&gt;The position of prime 2 is 1, prime 3 is 2, and prime 5 is 3, etc.&lt;br&gt;Specially, LPF(1) &amp;#x3D; 0.&lt;/p&gt;
&lt;p&gt;Input&lt;br&gt;Each line will contain one integer n(0 &amp;lt; n &amp;lt; 1000000).&lt;/p&gt;
&lt;p&gt;Output&lt;br&gt;Output the LPF(n).&lt;/p&gt;
&lt;p&gt;Sample</summary>
      
    
    
    
    <category term="hdu" scheme="https://carl-zk.github.io/blog/categories/hdu/"/>
    
    
  </entry>
  
  <entry>
    <title>Leftmost Digit</title>
    <link href="https://carl-zk.github.io/blog/2016/06/22/Leftmost-Digit/"/>
    <id>https://carl-zk.github.io/blog/2016/06/22/Leftmost-Digit/</id>
    <published>2016-06-22T09:08:07.000Z</published>
    <updated>2024-05-18T08:19:43.155Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/game/entry/problem/show.php?chapterid=2&amp;sectionid=1&amp;problemid=11&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;Leftmost Digit&lt;/p&gt;
&lt;p&gt;Time Limit: 2000&amp;#x2F;1000 MS (Java&amp;#x2F;Others) Memory Limit: 65536&amp;#x2F;32768 K (Java&amp;#x2F;Others)&lt;br&gt;Total Submission(s): 3331 Accepted Submission(s): 1464&lt;/p&gt;
&lt;p&gt;Problem Description&lt;br&gt;Given a positive integer N, you should output the leftmost digit of N^N.&lt;/p&gt;
&lt;p&gt;Input&lt;br&gt;The input contains several test cases. The first line of the input is a single integer T</summary>
      
    
    
    
    <category term="hdu" scheme="https://carl-zk.github.io/blog/categories/hdu/"/>
    
    
  </entry>
  
  <entry>
    <title>切蛋糕</title>
    <link href="https://carl-zk.github.io/blog/2016/06/22/%E5%88%87%E8%9B%8B%E7%B3%95/"/>
    <id>https://carl-zk.github.io/blog/2016/06/22/%E5%88%87%E8%9B%8B%E7%B3%95/</id>
    <published>2016-06-22T04:51:44.000Z</published>
    <updated>2024-05-18T08:19:43.195Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/game/entry/problem/show.php?chapterid=2&amp;sectionid=1&amp;problemid=4&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;Cake&lt;/p&gt;
&lt;p&gt;Time Limit: 1000&amp;#x2F;1000 MS (Java&amp;#x2F;Others) Memory Limit: 32768&amp;#x2F;32768 K (Java&amp;#x2F;Others)&lt;br&gt;Total Submission(s): 3439 Accepted Submission(s): 1642&lt;/p&gt;
&lt;p&gt;Problem Description&lt;br&gt;一次生日Party可能有p人或者q人参加,现准备有一个大蛋糕.问最少要将蛋糕切成多少块(每块大小不一定相等),才能使p人或者q人出席的任何一种情况,都能平均将蛋糕分食.&lt;/p&gt;
&lt;p&gt;Input&lt;br&gt;每行有两个数p和q.&lt;/p&gt;
&lt;p&gt;Output&lt;br&gt;输出最少要将蛋糕切成多少块.&lt;/p&gt;
&lt;p&gt;Sample Input&lt;br&gt;2 3&lt;/p&gt;
&lt;p&gt;Sample Out</summary>
      
    
    
    
    <category term="hdu" scheme="https://carl-zk.github.io/blog/categories/hdu/"/>
    
    
  </entry>
  
  <entry>
    <title>分数最小公倍数</title>
    <link href="https://carl-zk.github.io/blog/2016/06/22/%E5%88%86%E6%95%B0%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0/"/>
    <id>https://carl-zk.github.io/blog/2016/06/22/%E5%88%86%E6%95%B0%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0/</id>
    <published>2016-06-22T02:37:42.000Z</published>
    <updated>2024-05-18T08:19:43.194Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/game/entry/problem/show.php?chapterid=2&amp;sectionid=1&amp;problemid=3&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;&lt;strong&gt;相遇周期&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Time Limit: 1000&amp;#x2F;1000 MS (Java&amp;#x2F;Others) Memory Limit: 32768&amp;#x2F;32768 K (Java&amp;#x2F;Others)&lt;br&gt;Total Submission(s): 3218 Accepted Submission(s): 1505&lt;/p&gt;
&lt;p&gt;Problem Description&lt;br&gt;2007年3月26日，在中俄两国元首的见证下，中国国家航天局局长孙来燕与俄罗斯联邦航天局局长别尔米诺夫共同签署了《中国国家航天局和俄罗斯联邦航天局关于联合探测火星-火卫一合作的协议》，确定中俄双方将于2009年联合对火星及其卫星“火卫一”进行探测。&lt;/p&gt;
&lt;p&gt;而卫星是进行这些探测的重要工具，我们的问题是已知两颗卫星的运行周期，求它们的相</summary>
      
    
    
    
    <category term="hdu" scheme="https://carl-zk.github.io/blog/categories/hdu/"/>
    
    
  </entry>
  
  <entry>
    <title>How Many Prime Numbers</title>
    <link href="https://carl-zk.github.io/blog/2016/06/21/How-many-prime-numbers/"/>
    <id>https://carl-zk.github.io/blog/2016/06/21/How-many-prime-numbers/</id>
    <published>2016-06-21T14:25:22.000Z</published>
    <updated>2024-05-18T08:19:43.149Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/game/entry/problem/show.php?chapterid=2&amp;sectionid=1&amp;problemid=2&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;Problem Description&lt;br&gt;Give you a lot of positive integers, just to find out how many prime numbers there are.&lt;/p&gt;
&lt;p&gt;Input&lt;br&gt;There are a lot of cases. In each case, there is an integer N representing the number of integers to find. Each integer won’t exceed 32-bit signed integer, and each of them won’t be less than 2.&lt;/p&gt;
&lt;p&gt;Output&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        For each case, print the numbe</summary>
      
    
    
    
    <category term="hdu" scheme="https://carl-zk.github.io/blog/categories/hdu/"/>
    
    
  </entry>
  
  <entry>
    <title>字典序排列</title>
    <link href="https://carl-zk.github.io/blog/2016/06/21/%E5%AD%97%E5%85%B8%E5%BA%8F%E6%8E%92%E5%88%97/"/>
    <id>https://carl-zk.github.io/blog/2016/06/21/%E5%AD%97%E5%85%B8%E5%BA%8F%E6%8E%92%E5%88%97/</id>
    <published>2016-06-21T12:30:49.000Z</published>
    <updated>2024-05-18T08:19:43.199Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/game/entry/problem/show.php?chapterid=1&amp;sectionid=3&amp;problemid=17&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;排列2&lt;/p&gt;
&lt;p&gt;Time Limit: 1000&amp;#x2F;1000 MS (Java&amp;#x2F;Others) Memory Limit: 32768&amp;#x2F;32768 K (Java&amp;#x2F;Others)&lt;br&gt;Total Submission(s): 3792 Accepted Submission(s): 1143&lt;/p&gt;
&lt;p&gt;Problem Description&lt;br&gt;Ray又对数字的列产生了兴趣：&lt;br&gt;现有四张卡片，用这四张卡片能排列出很多不同的4位数，要求按从小到大的顺序输出这些4位数。&lt;/p&gt;
&lt;p&gt;Input&lt;br&gt;每组数据占一行，代表四张卡片上的数字（0&amp;lt;&amp;#x3D;数字&amp;lt;&amp;#x3D;9），如果四张卡片都是0，则输入结束。&lt;/p&gt;
&lt;p&gt;Output&lt;br&gt;对每组卡片按从小到大的顺序输出所有能由这四张卡片组成的4位</summary>
      
    
    
    
    <category term="hdu" scheme="https://carl-zk.github.io/blog/categories/hdu/"/>
    
    
  </entry>
  
  <entry>
    <title>字符串比较</title>
    <link href="https://carl-zk.github.io/blog/2016/06/21/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AF%94%E8%BE%83/"/>
    <id>https://carl-zk.github.io/blog/2016/06/21/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AF%94%E8%BE%83/</id>
    <published>2016-06-21T04:38:16.000Z</published>
    <updated>2024-05-18T08:19:43.199Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/game/entry/problem/show.php?chapterid=1&amp;sectionid=3&amp;problemid=7&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;开门人和关门人&lt;/p&gt;
&lt;p&gt;Problem Description&lt;br&gt;每天第一个到机房的人要把门打开，最后一个离开的人要把门关好。现有一堆杂乱的机房签&lt;br&gt;到、签离记录，请根据记录找出当天开门和关门的人。 &lt;/p&gt;
&lt;p&gt;Input&lt;br&gt;测试输入的第一行给出记录的总天数N ( &amp;gt; 0 )。下面列出了N天的记录。&lt;br&gt;每天的记录在第一行给出记录的条目数M ( &amp;gt; 0 )，下面是M行，每行的格式为 &lt;/p&gt;
&lt;p&gt;证件号码 签到时间 签离时间 &lt;/p&gt;
&lt;p&gt;其中时间按“小时:分钟:秒钟”（各占2位）给出，证件号码是长度不超过15的字符串。&lt;/p&gt;
&lt;p&gt;Output&lt;br&gt;对每一天的记录输出1行，即当天开门和关门人的证件号码，中间用1空格分隔。&lt;br&gt;注意：在裁判的标准测试输入中，所有记录保证完整，每个人的签到时间在签离时间之前，&lt;br&gt;且没有多</summary>
      
    
    
    
    <category term="hdu" scheme="https://carl-zk.github.io/blog/categories/hdu/"/>
    
    
  </entry>
  
  <entry>
    <title>FatMouse&#39; Trade</title>
    <link href="https://carl-zk.github.io/blog/2016/06/21/FatMouse-Trade/"/>
    <id>https://carl-zk.github.io/blog/2016/06/21/FatMouse-Trade/</id>
    <published>2016-06-21T01:52:52.000Z</published>
    <updated>2024-05-18T08:19:43.148Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/game/entry/problem/show.php?chapterid=1&amp;sectionid=3&amp;problemid=1&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;Problem Description&lt;br&gt;FatMouse prepared M pounds of cat food, ready to trade with the cats guarding the warehouse containing his favorite food, JavaBean.&lt;br&gt;The warehouse has N rooms. The i-th room contains J[i] pounds of JavaBeans and requires F[i] pounds of cat food. FatMouse does not have to trade for all the JavaBeans in the room, instead, he may get J[i]* a% pounds of JavaBeans if</summary>
      
    
    
    
    <category term="hdu" scheme="https://carl-zk.github.io/blog/categories/hdu/"/>
    
    
  </entry>
  
  <entry>
    <title>Decimal System</title>
    <link href="https://carl-zk.github.io/blog/2016/06/21/decimal-system/"/>
    <id>https://carl-zk.github.io/blog/2016/06/21/decimal-system/</id>
    <published>2016-06-21T00:52:17.000Z</published>
    <updated>2024-05-18T08:19:43.163Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/game/entry/problem/show.php?chapterid=1&amp;sectionid=2&amp;problemid=18&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;&lt;strong&gt;decimal system&lt;/strong&gt;&lt;br&gt;Problem Description&lt;br&gt;As we know , we always use the decimal system in our common life, even using the computer. If we want to calculate the value that 3 plus 9, we just import 3 and 9.after calculation of computer, we will get the result of 12.&lt;br&gt;But after learning &amp;lt;&lt;The Principle Of Computer&gt;&amp;gt;,we know that the computer will do the calculatio</summary>
      
    
    
    
    <category term="hdu" scheme="https://carl-zk.github.io/blog/categories/hdu/"/>
    
    
  </entry>
  
  <entry>
    <title>C语言字符串处理</title>
    <link href="https://carl-zk.github.io/blog/2016/06/21/c%E8%AF%AD%E8%A8%80%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
    <id>https://carl-zk.github.io/blog/2016/06/21/c%E8%AF%AD%E8%A8%80%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/</id>
    <published>2016-06-20T17:38:39.000Z</published>
    <updated>2024-05-18T08:19:43.163Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/game/entry/problem/show.php?chapterid=1&amp;sectionid=2&amp;problemid=14&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;&lt;strong&gt;The Seven Percent Solution&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Problem Description&lt;br&gt;Uniform Resource Identifiers (or URIs) are strings like &lt;a href=&quot;http://icpc.baylor.edu/icpc/&quot;&gt;http://icpc.baylor.edu/icpc/&lt;/a&gt;, mailto:&lt;a href=&quot;mailto:&amp;#102;&amp;#x6f;&amp;#x6f;&amp;#64;&amp;#x62;&amp;#x61;&amp;#x72;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#x67;&quot;&gt;&amp;#102;&amp;#x6f;&amp;#x6f;&amp;#64;&amp;#x62;&amp;#x61;&amp;#x72;&amp;#x2e;&amp;#111;&amp;#x72;&amp;#x67;&lt;/a&gt;, &lt;a href=&quot;ftp://127.0.0.1</summary>
      
    
    
    
    <category term="hdu" scheme="https://carl-zk.github.io/blog/categories/hdu/"/>
    
    
  </entry>
  
  <entry>
    <title>Rightmost Digit</title>
    <link href="https://carl-zk.github.io/blog/2016/06/20/Rightmost-Digit/"/>
    <id>https://carl-zk.github.io/blog/2016/06/20/Rightmost-Digit/</id>
    <published>2016-06-20T14:38:20.000Z</published>
    <updated>2024-05-18T08:19:43.160Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/game/entry/problem/show.php?chapterid=1&amp;sectionid=2&amp;problemid=12&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;Problem Description&lt;br&gt;Given a positive integer N, you should output the most right digit of N^N.&lt;/p&gt;
&lt;p&gt;Input&lt;br&gt;The input contains several test cases. The first line of the input is a single integer T which is the number of test cases. T test cases follow.&lt;br&gt;Each test case contains a single positive integer N(1&amp;lt;&amp;#x3D;N&amp;lt;&amp;#x3D;1,000,000,000).&lt;/p&gt;
&lt;p&gt;Output&lt;br&gt;For each test case,</summary>
      
    
    
    
    <category term="hdu" scheme="https://carl-zk.github.io/blog/categories/hdu/"/>
    
    
  </entry>
  
  <entry>
    <title>Sql查询</title>
    <link href="https://carl-zk.github.io/blog/2016/06/19/sql%E6%9F%A5%E8%AF%A2/"/>
    <id>https://carl-zk.github.io/blog/2016/06/19/sql%E6%9F%A5%E8%AF%A2/</id>
    <published>2016-06-19T04:17:30.000Z</published>
    <updated>2024-05-18T08:19:43.167Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://tangwenchao86.iteye.com/blog/1107795&quot;&gt;Group By 和 Having, Where ,Order by语句的执行顺序：&lt;/a&gt;&lt;br&gt;Where&amp;gt; Group By&amp;gt; Having&amp;gt; Order by。首先where将最原始记录中不满足条件的记录删除(所以应该在where语句中尽量的将不符合条件的记录筛选掉，这样可以减少分组的次数)，然后通过Group By关键字后面指定的分组条件将筛选得到的视图进行分组，接着系统根据Having关键字后面指定的筛选条件，将分组视图后不满足条件的记录筛选掉，然后按照Order By语句对视图进行排序，这样最终的结果就产生了。在这四个关键字中，只有在Order By语句中才可以使用最终视图的列名，如： 　　SELECT FruitName, ProductPlace, Price, ID AS IDE, Discount 　　FROM T_TEST_FRUITINFO 　　WHERE (ProductPlace &amp;#x3D; N’china’) 　　ORDE</summary>
      
    
    
    
    
    <category term="sql" scheme="https://carl-zk.github.io/blog/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>哈夫曼编码</title>
    <link href="https://carl-zk.github.io/blog/2016/06/18/%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81/"/>
    <id>https://carl-zk.github.io/blog/2016/06/18/%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81/</id>
    <published>2016-06-18T15:00:18.000Z</published>
    <updated>2024-05-18T08:19:43.196Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;哈夫曼编码主要解决不定长编码问题,可以更加节省传输字节.由于每个字母都是叶结点,所以不存在一个编码是另一个编码的前缀的问题.越频繁的编码字母离根结点越近,即编码越短.&lt;br&gt;由传输的比特流01联想到二叉树的左右孩子,进而想出新的编码方式,这真是太伟大了.&lt;br&gt;priority_queue使用时需注意:&lt;br&gt;1.若存放实体,则直接在实体内重构比较运算符即可;&lt;br&gt;2.若存放指针,则需指定排序规则;&lt;br&gt;(c语言的编程精髓就是如何使用指针,不过时刻注意防止内存泄露问题.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    <category term="数据结构" scheme="https://carl-zk.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu添加开机启动</title>
    <link href="https://carl-zk.github.io/blog/2016/06/18/ubuntu%E6%B7%BB%E5%8A%A0%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/"/>
    <id>https://carl-zk.github.io/blog/2016/06/18/ubuntu%E6%B7%BB%E5%8A%A0%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/</id>
    <published>2016-06-18T04:50:27.000Z</published>
    <updated>2024-05-18T08:19:43.168Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;我将mysql server 的开机启动写成脚本,加到rc.local文件中;&lt;br&gt;XX-Net需要联网,所以设置成为一个启动服务,优先级99;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;1、方法一，编辑rc-loacl脚本&quot;&gt;&lt;a href=&quot;#1、方法一，编辑rc-loacl脚本&quot; class=&quot;headerlink&quot; title=&quot;1、方法一，编辑rc.loacl脚本&quot;&gt;&lt;/a&gt;1、方法一，编辑rc.loacl脚本&lt;/h4&gt;&lt;p&gt;Ubuntu开机之后会执行&amp;#x2F;etc&amp;#x2F;rc.local文件中的脚本，&lt;br&gt;所以我们可以直接在&amp;#x2F;etc&amp;#x2F;rc.local中添加启动脚本。&lt;br&gt;当然要添加到语句：exit 0 前面才行。&lt;br&gt;如：&lt;br&gt;sudo vi &amp;#x2F;etc&amp;#x2F;rc.local&lt;br&gt;然后在 exit 0 前面添加好脚本代码。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class</summary>
      
    
    
    
    <category term="系统配置" scheme="https://carl-zk.github.io/blog/categories/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>前序和中序构造二叉树</title>
    <link href="https://carl-zk.github.io/blog/2016/06/17/%E5%89%8D%E5%BA%8F%E5%92%8C%E4%B8%AD%E5%BA%8F%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://carl-zk.github.io/blog/2016/06/17/%E5%89%8D%E5%BA%8F%E5%92%8C%E4%B8%AD%E5%BA%8F%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2016-06-17T03:21:56.000Z</published>
    <updated>2024-05-18T08:19:43.195Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;前序和中序、后序和中序&lt;/strong&gt;序列可以构造唯一一颗二叉树.&lt;br&gt;1.从前序序列找到父节点,即首个结点;&lt;br&gt;2.中序序列找到此父结点,它的左右分别对应左孩子和右孩子;&lt;br&gt;以此递归,直到满足边界值.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span cl</summary>
      
    
    
    
    <category term="数据结构" scheme="https://carl-zk.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>二叉树后序遍历非递归</title>
    <link href="https://carl-zk.github.io/blog/2016/06/17/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E9%9D%9E%E9%80%92%E5%BD%92/"/>
    <id>https://carl-zk.github.io/blog/2016/06/17/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E9%9D%9E%E9%80%92%E5%BD%92/</id>
    <published>2016-06-17T01:31:34.000Z</published>
    <updated>2024-05-18T08:19:43.193Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;(后序遍历需要对每个结点设置一个标志位,标示此结点的右孩子是否已被访问.)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一直访问左孩子,直到NULL;&lt;br&gt;2.栈顶是否有右孩子,若有,按1执行;若无,打印栈顶,出栈;&lt;br&gt;操作过程中,维护一个对应的visitedRight栈.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;lin</summary>
      
    
    
    
    <category term="数据结构" scheme="https://carl-zk.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>二叉树先序遍历非递归</title>
    <link href="https://carl-zk.github.io/blog/2016/06/17/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86%E9%9D%9E%E9%80%92%E5%BD%92/"/>
    <id>https://carl-zk.github.io/blog/2016/06/17/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86%E9%9D%9E%E9%80%92%E5%BD%92/</id>
    <published>2016-06-17T00:45:05.000Z</published>
    <updated>2024-05-18T08:19:43.193Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;与中序遍历类似&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1</summary>
      
    
    
    
    <category term="数据结构" scheme="https://carl-zk.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>二叉树中序遍历非递归</title>
    <link href="https://carl-zk.github.io/blog/2016/06/17/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E9%9D%9E%E9%80%92%E5%BD%92/"/>
    <id>https://carl-zk.github.io/blog/2016/06/17/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E9%9D%9E%E9%80%92%E5%BD%92/</id>
    <published>2016-06-16T16:00:39.000Z</published>
    <updated>2024-05-18T08:19:43.193Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;1.从根结点开始,一直访问左孩子,直到NULL,将其全部压栈.&lt;br&gt;2.打印栈顶结点,做出栈操作,将r指向右孩子.&lt;br&gt;重复1.2.直到结束.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;</summary>
      
    
    
    
    <category term="数据结构" scheme="https://carl-zk.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>二叉树的广度优先遍历</title>
    <link href="https://carl-zk.github.io/blog/2016/06/16/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/"/>
    <id>https://carl-zk.github.io/blog/2016/06/16/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/</id>
    <published>2016-06-16T02:32:52.000Z</published>
    <updated>2024-05-18T08:19:43.194Z</updated>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;可以在struct内写默认构造函数.&lt;br&gt;在buildTree方法中声明了nodeList[len], 返回值为&amp;amp;nodeList[1]时结果print方法报错,原来我是把局部变量的地址传出,结果局部变量的内存已经被释放.改为声明nodeList为全局变量,或者使用malloc.malloc方法是直接向内存申请空间,不手动free这块内存就永远不会被释放,容易产生内存泄露.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/s</summary>
      
    
    
    
    <category term="数据结构" scheme="https://carl-zk.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>二叉树的广义表表示方法</title>
    <link href="https://carl-zk.github.io/blog/2016/06/16/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B9%BF%E4%B9%89%E8%A1%A8%E8%A1%A8%E7%A4%BA%E6%96%B9%E6%B3%95/"/>
    <id>https://carl-zk.github.io/blog/2016/06/16/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B9%BF%E4%B9%89%E8%A1%A8%E8%A1%A8%E7%A4%BA%E6%96%B9%E6%B3%95/</id>
    <published>2016-06-15T16:05:26.000Z</published>
    <updated>2024-05-18T08:19:43.194Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;二叉树的广义表表示如下图所示:&lt;br&gt;&lt;img src=&quot;http://o6ibfi17w.bkt.clouddn.com/image%2F%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B9%BF%E4%B9%89%E8%A1%A8.png&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;根据广义表创建一颗二叉树&quot;&gt;&lt;a href=&quot;#根据广义表创建一颗二叉树&quot; class=&quot;headerlink&quot; title=&quot;根据广义表创建一颗二叉树:&quot;&gt;&lt;/a&gt;根据广义表创建一颗二叉树:&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;若元素为字母,则创建一个新结点nest;&lt;ul&gt;
&lt;li&gt;若该结点不是二叉树的根结点,则将该结点作为左孩子(flag&amp;#x3D;’l’)或者右孩子(flag&amp;#x3D;’r’)链接到父结点上(即栈顶结点);&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;若元素为左括号,将flag置’l’,同时将结点nest压栈;&lt;/li&gt;
&lt;li&gt;若元素为右括号,表明一个子表结束,做退栈操作;&lt;/li&gt;
&lt;li&gt;若元素为逗号,表明以左孩子为根的子树处理完毕,将flag置’r</summary>
      
    
    
    
    <category term="数据结构" scheme="https://carl-zk.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>面试经验总结</title>
    <link href="https://carl-zk.github.io/blog/2016/06/08/%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    <id>https://carl-zk.github.io/blog/2016/06/08/%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/</id>
    <published>2016-06-07T16:14:50.000Z</published>
    <updated>2024-05-18T08:19:43.211Z</updated>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1、青蛙跳跳&quot;&gt;&lt;a href=&quot;#1、青蛙跳跳&quot; class=&quot;headerlink&quot; title=&quot;1、青蛙跳跳&quot;&gt;&lt;/a&gt;1、青蛙跳跳&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;n块石头，一只青蛙一次可以跳一块石头，也可以跳两块石头，请问这只青蛙有几种跳法？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://o6ibfi17w.bkt.clouddn.com/image%2Ffrogstones.png&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;n块石头&lt;/th&gt;
&lt;th&gt;跳法枚举&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;总共T(n)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;()&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;(1)&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;(1,1)(2)&lt;/td</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello Python</title>
    <link href="https://carl-zk.github.io/blog/2016/06/06/Hello-Python/"/>
    <id>https://carl-zk.github.io/blog/2016/06/06/Hello-Python/</id>
    <published>2016-06-06T15:18:31.000Z</published>
    <updated>2024-05-18T08:19:43.149Z</updated>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;《Python-核心编程》&quot;&gt;&lt;a href=&quot;#《Python-核心编程》&quot; class=&quot;headerlink&quot; title=&quot;《Python 核心编程》&quot;&gt;&lt;/a&gt;&lt;strong&gt;《Python 核心编程》&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;基于python2.7版本&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&quot;第一章-欢迎来到python世界&quot;&gt;&lt;a href=&quot;#第一章-欢迎来到python世界&quot; class=&quot;headerlink&quot; title=&quot;第一章 欢迎来到python世界&quot;&gt;&lt;/a&gt;第一章 欢迎来到python世界&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cl</summary>
      
    
    
    
    
    <category term="python" scheme="https://carl-zk.github.io/blog/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>迷茫小书童</title>
    <link href="https://carl-zk.github.io/blog/2016/06/01/%E5%BF%83%E7%81%B5%E9%A9%BF%E7%AB%99/"/>
    <id>https://carl-zk.github.io/blog/2016/06/01/%E5%BF%83%E7%81%B5%E9%A9%BF%E7%AB%99/</id>
    <published>2016-06-01T04:28:04.000Z</published>
    <updated>2024-05-18T08:19:43.201Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;原本在上次面试链家后决定好好学习，想在年底再去找工作，可是上周跟老板处的不是很好，冲动之下提出辞职，到今天找工作也快要一周了，拉勾网上的招聘不是很多，有些小公司我也不想去，算下来投了简历不超过10个，面试邀请只有3个。遇到的面试官都不是很有经验，有的也让我觉得无语。唉，虽然自己不是什么牛，但是踏实学习的劲头也还是有的，只不过我的性格决定了我不适合给别人打工。&lt;/p&gt;
&lt;p&gt;究竟是好事还是坏事呢，我有点要否定自己的感觉了。我赶在这个时候提出了辞职，也算是给自己了一个教训，不过既然是决定好了，而且后来想想这样做也非不可，那就顺着这个趋势走吧。&lt;/p&gt;
&lt;p&gt;我小看了“失业”，虽然对于一个程序员来说，跳槽不是什么稀罕事，换一份工作也没有那么难，但是在没有拿到任何offer之前，内心还是很悲伤的。可能这也是一个机会吧，好让我清醒清醒我之前忙碌工作的状态和它的意义，我还没有好好想过这些。&lt;/p&gt;
&lt;p&gt;我的朋友很少，所以我也能坦然独自面对。我不想成为一个虚伪的人，我也做不到这一点。我喜欢和真诚的人交朋友，我要让自己变的优秀，这样我就能接触更多牛逼的人，通常情况下，牛逼的人都很真诚。&lt;/p&gt;</summary>
      
    
    
    
    
  </entry>
  
</feed>
